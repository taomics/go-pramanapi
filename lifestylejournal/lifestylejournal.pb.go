// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: lifestylejournal/lifestylejournal.proto

package lifestylejournal

import (
	pramanapi "github.com/taomics/pramanapi"
	recordlog "github.com/taomics/pramanapi/recordlog"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrackerStatus int32

const (
	TrackerStatus_NO_TRACKER           TrackerStatus = 0 // トラッカーを使っていない
	TrackerStatus_FITBIT_RAW           TrackerStatus = 1 // Fitbit のデータを利用している
	TrackerStatus_FITBIT_MODIFIED      TrackerStatus = 2 // Fitbit のデータを一部変更して利用している
	TrackerStatus_APPLE_WATCH_RAW      TrackerStatus = 3 // Apple Watch のデータを利用している
	TrackerStatus_APPLE_WATCH_MODIFIED TrackerStatus = 4 // Apple Watch のデータを一部変更して利用している
)

// Enum value maps for TrackerStatus.
var (
	TrackerStatus_name = map[int32]string{
		0: "NO_TRACKER",
		1: "FITBIT_RAW",
		2: "FITBIT_MODIFIED",
		3: "APPLE_WATCH_RAW",
		4: "APPLE_WATCH_MODIFIED",
	}
	TrackerStatus_value = map[string]int32{
		"NO_TRACKER":           0,
		"FITBIT_RAW":           1,
		"FITBIT_MODIFIED":      2,
		"APPLE_WATCH_RAW":      3,
		"APPLE_WATCH_MODIFIED": 4,
	}
)

func (x TrackerStatus) Enum() *TrackerStatus {
	p := new(TrackerStatus)
	*p = x
	return p
}

func (x TrackerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[0].Descriptor()
}

func (TrackerStatus) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[0]
}

func (x TrackerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackerStatus.Descriptor instead.
func (TrackerStatus) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{0}
}

type Sleepiness int32

const (
	Sleepiness_SLEEPINESS_UNKNOWN Sleepiness = 0
	Sleepiness_NO_SLEEPINESS      Sleepiness = 1 // 眠気なし
	Sleepiness_SLIGHTLY_SLEEPY    Sleepiness = 2 // 少し眠い
	Sleepiness_QUITE_SLEEPY       Sleepiness = 3 // かなり眠い
	Sleepiness_EXTREMELY_SLEEPY   Sleepiness = 4 // 激しく眠い
)

// Enum value maps for Sleepiness.
var (
	Sleepiness_name = map[int32]string{
		0: "SLEEPINESS_UNKNOWN",
		1: "NO_SLEEPINESS",
		2: "SLIGHTLY_SLEEPY",
		3: "QUITE_SLEEPY",
		4: "EXTREMELY_SLEEPY",
	}
	Sleepiness_value = map[string]int32{
		"SLEEPINESS_UNKNOWN": 0,
		"NO_SLEEPINESS":      1,
		"SLIGHTLY_SLEEPY":    2,
		"QUITE_SLEEPY":       3,
		"EXTREMELY_SLEEPY":   4,
	}
)

func (x Sleepiness) Enum() *Sleepiness {
	p := new(Sleepiness)
	*p = x
	return p
}

func (x Sleepiness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sleepiness) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[1].Descriptor()
}

func (Sleepiness) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[1]
}

func (x Sleepiness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sleepiness.Descriptor instead.
func (Sleepiness) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{1}
}

// 菓子・飲料
type ExtraEnergy int32

const (
	ExtraEnergy_EXTRA_ENERGY_UNKNOWN    ExtraEnergy = 0
	ExtraEnergy_NO_EXTRA_ENERGY         ExtraEnergy = 1 // 0
	ExtraEnergy_AROUND_100_KILOCALORIES ExtraEnergy = 2 // 100
	ExtraEnergy_AROUND_200_KILOCALORIES ExtraEnergy = 3 // 200
	ExtraEnergy_AROUND_300_KILOCALORIES ExtraEnergy = 4 // 300
	ExtraEnergy_OVER_400_KILOCALORIES   ExtraEnergy = 5 // 400以上
	ExtraEnergy_AROUND_400_KILOCALORIES ExtraEnergy = 6 // 400
	ExtraEnergy_OVER_600_KILOCALORIES   ExtraEnergy = 7 // 600以上
)

// Enum value maps for ExtraEnergy.
var (
	ExtraEnergy_name = map[int32]string{
		0: "EXTRA_ENERGY_UNKNOWN",
		1: "NO_EXTRA_ENERGY",
		2: "AROUND_100_KILOCALORIES",
		3: "AROUND_200_KILOCALORIES",
		4: "AROUND_300_KILOCALORIES",
		5: "OVER_400_KILOCALORIES",
		6: "AROUND_400_KILOCALORIES",
		7: "OVER_600_KILOCALORIES",
	}
	ExtraEnergy_value = map[string]int32{
		"EXTRA_ENERGY_UNKNOWN":    0,
		"NO_EXTRA_ENERGY":         1,
		"AROUND_100_KILOCALORIES": 2,
		"AROUND_200_KILOCALORIES": 3,
		"AROUND_300_KILOCALORIES": 4,
		"OVER_400_KILOCALORIES":   5,
		"AROUND_400_KILOCALORIES": 6,
		"OVER_600_KILOCALORIES":   7,
	}
)

func (x ExtraEnergy) Enum() *ExtraEnergy {
	p := new(ExtraEnergy)
	*p = x
	return p
}

func (x ExtraEnergy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtraEnergy) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[2].Descriptor()
}

func (ExtraEnergy) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[2]
}

func (x ExtraEnergy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtraEnergy.Descriptor instead.
func (ExtraEnergy) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{2}
}

type BristolStoolScale_Type int32

const (
	BristolStoolScale_BRISTOL_STOOL_SCALE_UNKNOWN BristolStoolScale_Type = 0
	BristolStoolScale_NO_STOOL                    BristolStoolScale_Type = 1 // 便なし
	BristolStoolScale_TYPE_1                      BristolStoolScale_Type = 2 // コロコロ便
	BristolStoolScale_TYPE_2                      BristolStoolScale_Type = 3 // 硬い便
	BristolStoolScale_TYPE_3                      BristolStoolScale_Type = 4 // やや硬い便
	BristolStoolScale_TYPE_4                      BristolStoolScale_Type = 5 // 普通弁
	BristolStoolScale_TYPE_5                      BristolStoolScale_Type = 6 // やや柔ない便
	BristolStoolScale_TYPE_6                      BristolStoolScale_Type = 7 // 泥状便
	BristolStoolScale_TYPE_7                      BristolStoolScale_Type = 8 // 水様便
)

// Enum value maps for BristolStoolScale_Type.
var (
	BristolStoolScale_Type_name = map[int32]string{
		0: "BRISTOL_STOOL_SCALE_UNKNOWN",
		1: "NO_STOOL",
		2: "TYPE_1",
		3: "TYPE_2",
		4: "TYPE_3",
		5: "TYPE_4",
		6: "TYPE_5",
		7: "TYPE_6",
		8: "TYPE_7",
	}
	BristolStoolScale_Type_value = map[string]int32{
		"BRISTOL_STOOL_SCALE_UNKNOWN": 0,
		"NO_STOOL":                    1,
		"TYPE_1":                      2,
		"TYPE_2":                      3,
		"TYPE_3":                      4,
		"TYPE_4":                      5,
		"TYPE_5":                      6,
		"TYPE_6":                      7,
		"TYPE_7":                      8,
	}
)

func (x BristolStoolScale_Type) Enum() *BristolStoolScale_Type {
	p := new(BristolStoolScale_Type)
	*p = x
	return p
}

func (x BristolStoolScale_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BristolStoolScale_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[3].Descriptor()
}

func (BristolStoolScale_Type) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[3]
}

func (x BristolStoolScale_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BristolStoolScale_Type.Descriptor instead.
func (BristolStoolScale_Type) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{0, 0}
}

type JournalSleep_FallAsleepDifficulty int32

const (
	JournalSleep_FALL_ASLEEP_DIFFICULTY_UNKNOWN JournalSleep_FallAsleepDifficulty = 0
	JournalSleep_IMMEDIATE                      JournalSleep_FallAsleepDifficulty = 1 // すぐ就寝
	JournalSleep_WITHIN_30_MINUTES              JournalSleep_FallAsleepDifficulty = 2 // 30分以内
	JournalSleep_WITHIN_1_HOUR                  JournalSleep_FallAsleepDifficulty = 3 // 1時間未満
	JournalSleep_OVER_1_HOUR                    JournalSleep_FallAsleepDifficulty = 4 // 1時間以上
)

// Enum value maps for JournalSleep_FallAsleepDifficulty.
var (
	JournalSleep_FallAsleepDifficulty_name = map[int32]string{
		0: "FALL_ASLEEP_DIFFICULTY_UNKNOWN",
		1: "IMMEDIATE",
		2: "WITHIN_30_MINUTES",
		3: "WITHIN_1_HOUR",
		4: "OVER_1_HOUR",
	}
	JournalSleep_FallAsleepDifficulty_value = map[string]int32{
		"FALL_ASLEEP_DIFFICULTY_UNKNOWN": 0,
		"IMMEDIATE":                      1,
		"WITHIN_30_MINUTES":              2,
		"WITHIN_1_HOUR":                  3,
		"OVER_1_HOUR":                    4,
	}
)

func (x JournalSleep_FallAsleepDifficulty) Enum() *JournalSleep_FallAsleepDifficulty {
	p := new(JournalSleep_FallAsleepDifficulty)
	*p = x
	return p
}

func (x JournalSleep_FallAsleepDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalSleep_FallAsleepDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[4].Descriptor()
}

func (JournalSleep_FallAsleepDifficulty) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[4]
}

func (x JournalSleep_FallAsleepDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalSleep_FallAsleepDifficulty.Descriptor instead.
func (JournalSleep_FallAsleepDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{1, 0}
}

type JournalSleep_SleepQuality int32

const (
	JournalSleep_SLEEP_QUALITY_UNKNOWN JournalSleep_SleepQuality = 0
	JournalSleep_RESTLESS              JournalSleep_SleepQuality = 1 // 非常に疲れが取れなかった
	JournalSleep_UNSETTLED             JournalSleep_SleepQuality = 2 // 疲れが取れなかった
	JournalSleep_SLEEP_QUALITY_NEUTRAL JournalSleep_SleepQuality = 3 // どちらとも言えない
	JournalSleep_RELAXED               JournalSleep_SleepQuality = 4 // 疲れが取れた
	JournalSleep_RESTFUL               JournalSleep_SleepQuality = 5 // 非常に疲れが取れた
)

// Enum value maps for JournalSleep_SleepQuality.
var (
	JournalSleep_SleepQuality_name = map[int32]string{
		0: "SLEEP_QUALITY_UNKNOWN",
		1: "RESTLESS",
		2: "UNSETTLED",
		3: "SLEEP_QUALITY_NEUTRAL",
		4: "RELAXED",
		5: "RESTFUL",
	}
	JournalSleep_SleepQuality_value = map[string]int32{
		"SLEEP_QUALITY_UNKNOWN": 0,
		"RESTLESS":              1,
		"UNSETTLED":             2,
		"SLEEP_QUALITY_NEUTRAL": 3,
		"RELAXED":               4,
		"RESTFUL":               5,
	}
)

func (x JournalSleep_SleepQuality) Enum() *JournalSleep_SleepQuality {
	p := new(JournalSleep_SleepQuality)
	*p = x
	return p
}

func (x JournalSleep_SleepQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalSleep_SleepQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[5].Descriptor()
}

func (JournalSleep_SleepQuality) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[5]
}

func (x JournalSleep_SleepQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalSleep_SleepQuality.Descriptor instead.
func (JournalSleep_SleepQuality) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{1, 1}
}

type JournalMeal_Quantity int32

const (
	JournalMeal_ZERO       JournalMeal_Quantity = 0 // 0
	JournalMeal_HALF       JournalMeal_Quantity = 1 // 0.5
	JournalMeal_ONE        JournalMeal_Quantity = 2 // 1
	JournalMeal_TWO        JournalMeal_Quantity = 3 // 2
	JournalMeal_OVER_THREE JournalMeal_Quantity = 4 // 3 以上
)

// Enum value maps for JournalMeal_Quantity.
var (
	JournalMeal_Quantity_name = map[int32]string{
		0: "ZERO",
		1: "HALF",
		2: "ONE",
		3: "TWO",
		4: "OVER_THREE",
	}
	JournalMeal_Quantity_value = map[string]int32{
		"ZERO":       0,
		"HALF":       1,
		"ONE":        2,
		"TWO":        3,
		"OVER_THREE": 4,
	}
)

func (x JournalMeal_Quantity) Enum() *JournalMeal_Quantity {
	p := new(JournalMeal_Quantity)
	*p = x
	return p
}

func (x JournalMeal_Quantity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalMeal_Quantity) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[6].Descriptor()
}

func (JournalMeal_Quantity) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[6]
}

func (x JournalMeal_Quantity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalMeal_Quantity.Descriptor instead.
func (JournalMeal_Quantity) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{2, 0}
}

type JournalIndulgence_CaffeineQuantity int32

const (
	JournalIndulgence_NO_CAFEINE    JournalIndulgence_CaffeineQuantity = 0
	JournalIndulgence_ONE_CUP       JournalIndulgence_CaffeineQuantity = 1 // 1杯
	JournalIndulgence_TWO_CUPS      JournalIndulgence_CaffeineQuantity = 2 // 2杯
	JournalIndulgence_WITHIN_5_CUPS JournalIndulgence_CaffeineQuantity = 3 // 3-5杯
	JournalIndulgence_OVER_5_CUPS   JournalIndulgence_CaffeineQuantity = 4 // 6杯以上
)

// Enum value maps for JournalIndulgence_CaffeineQuantity.
var (
	JournalIndulgence_CaffeineQuantity_name = map[int32]string{
		0: "NO_CAFEINE",
		1: "ONE_CUP",
		2: "TWO_CUPS",
		3: "WITHIN_5_CUPS",
		4: "OVER_5_CUPS",
	}
	JournalIndulgence_CaffeineQuantity_value = map[string]int32{
		"NO_CAFEINE":    0,
		"ONE_CUP":       1,
		"TWO_CUPS":      2,
		"WITHIN_5_CUPS": 3,
		"OVER_5_CUPS":   4,
	}
)

func (x JournalIndulgence_CaffeineQuantity) Enum() *JournalIndulgence_CaffeineQuantity {
	p := new(JournalIndulgence_CaffeineQuantity)
	*p = x
	return p
}

func (x JournalIndulgence_CaffeineQuantity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalIndulgence_CaffeineQuantity) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[7].Descriptor()
}

func (JournalIndulgence_CaffeineQuantity) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[7]
}

func (x JournalIndulgence_CaffeineQuantity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalIndulgence_CaffeineQuantity.Descriptor instead.
func (JournalIndulgence_CaffeineQuantity) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{3, 0}
}

// 純アルコール（g） = 容量（ml） × アルコール度数（%） / 100 x アルコール比重
// 0.8
//
// アルコール度数が15%の日本酒の1合（約180ml）の場合のアルコール量は 21.6 g
type JournalIndulgence_AlcoholQuantity int32

const (
	JournalIndulgence_NO_ALCOHOL  JournalIndulgence_AlcoholQuantity = 0
	JournalIndulgence_WITHIN_1_GO JournalIndulgence_AlcoholQuantity = 1 // 1合未満
	JournalIndulgence_WITHIN_2_GO JournalIndulgence_AlcoholQuantity = 2 // 1-2合
	JournalIndulgence_WITHIN_3_GO JournalIndulgence_AlcoholQuantity = 3 // 2-3合
	JournalIndulgence_OVER_3_GO   JournalIndulgence_AlcoholQuantity = 4 // 3合以上
)

// Enum value maps for JournalIndulgence_AlcoholQuantity.
var (
	JournalIndulgence_AlcoholQuantity_name = map[int32]string{
		0: "NO_ALCOHOL",
		1: "WITHIN_1_GO",
		2: "WITHIN_2_GO",
		3: "WITHIN_3_GO",
		4: "OVER_3_GO",
	}
	JournalIndulgence_AlcoholQuantity_value = map[string]int32{
		"NO_ALCOHOL":  0,
		"WITHIN_1_GO": 1,
		"WITHIN_2_GO": 2,
		"WITHIN_3_GO": 3,
		"OVER_3_GO":   4,
	}
)

func (x JournalIndulgence_AlcoholQuantity) Enum() *JournalIndulgence_AlcoholQuantity {
	p := new(JournalIndulgence_AlcoholQuantity)
	*p = x
	return p
}

func (x JournalIndulgence_AlcoholQuantity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalIndulgence_AlcoholQuantity) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[8].Descriptor()
}

func (JournalIndulgence_AlcoholQuantity) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[8]
}

func (x JournalIndulgence_AlcoholQuantity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalIndulgence_AlcoholQuantity.Descriptor instead.
func (JournalIndulgence_AlcoholQuantity) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{3, 1}
}

type JournalIndulgence_TabaccoQuantity int32

const (
	JournalIndulgence_NO_TABACCO      JournalIndulgence_TabaccoQuantity = 0
	JournalIndulgence_UPTO_5          JournalIndulgence_TabaccoQuantity = 1 // 5本未満
	JournalIndulgence_AROUND_HALF_BOX JournalIndulgence_TabaccoQuantity = 2 // 半箱
	JournalIndulgence_AROUND_ONE_BOX  JournalIndulgence_TabaccoQuantity = 3 // 1箱
	JournalIndulgence_OVER_ONE_BOX    JournalIndulgence_TabaccoQuantity = 4 // それ以上
)

// Enum value maps for JournalIndulgence_TabaccoQuantity.
var (
	JournalIndulgence_TabaccoQuantity_name = map[int32]string{
		0: "NO_TABACCO",
		1: "UPTO_5",
		2: "AROUND_HALF_BOX",
		3: "AROUND_ONE_BOX",
		4: "OVER_ONE_BOX",
	}
	JournalIndulgence_TabaccoQuantity_value = map[string]int32{
		"NO_TABACCO":      0,
		"UPTO_5":          1,
		"AROUND_HALF_BOX": 2,
		"AROUND_ONE_BOX":  3,
		"OVER_ONE_BOX":    4,
	}
)

func (x JournalIndulgence_TabaccoQuantity) Enum() *JournalIndulgence_TabaccoQuantity {
	p := new(JournalIndulgence_TabaccoQuantity)
	*p = x
	return p
}

func (x JournalIndulgence_TabaccoQuantity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalIndulgence_TabaccoQuantity) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[9].Descriptor()
}

func (JournalIndulgence_TabaccoQuantity) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[9]
}

func (x JournalIndulgence_TabaccoQuantity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalIndulgence_TabaccoQuantity.Descriptor instead.
func (JournalIndulgence_TabaccoQuantity) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{3, 2}
}

type JournalIndulgence_TabaccoType int32

const (
	JournalIndulgence_TABACCO_TYPE_NONE     JournalIndulgence_TabaccoType = 0
	JournalIndulgence_CIGARETTES            JournalIndulgence_TabaccoType = 1 // 紙巻タバコ
	JournalIndulgence_HEATED                JournalIndulgence_TabaccoType = 2 // 加熱式タバコ（アイコス、プルーム、グローなど）
	JournalIndulgence_ELECTRONIC            JournalIndulgence_TabaccoType = 3 // 電子タバコ（VAPEなど）
	JournalIndulgence_CIGARETTES_HEATED     JournalIndulgence_TabaccoType = 4 // 紙巻タバコと加熱式タバコを併用
	JournalIndulgence_CIGARETTES_ELECTRONIC JournalIndulgence_TabaccoType = 5 // 紙巻タバコと電子タバコを併用
	JournalIndulgence_HEATED_ELECTRONIC     JournalIndulgence_TabaccoType = 6 // 加熱式タバコと電子タバコを併用
	JournalIndulgence_ALL                   JournalIndulgence_TabaccoType = 7 // 紙巻・加熱式・電子タバコを併用
)

// Enum value maps for JournalIndulgence_TabaccoType.
var (
	JournalIndulgence_TabaccoType_name = map[int32]string{
		0: "TABACCO_TYPE_NONE",
		1: "CIGARETTES",
		2: "HEATED",
		3: "ELECTRONIC",
		4: "CIGARETTES_HEATED",
		5: "CIGARETTES_ELECTRONIC",
		6: "HEATED_ELECTRONIC",
		7: "ALL",
	}
	JournalIndulgence_TabaccoType_value = map[string]int32{
		"TABACCO_TYPE_NONE":     0,
		"CIGARETTES":            1,
		"HEATED":                2,
		"ELECTRONIC":            3,
		"CIGARETTES_HEATED":     4,
		"CIGARETTES_ELECTRONIC": 5,
		"HEATED_ELECTRONIC":     6,
		"ALL":                   7,
	}
)

func (x JournalIndulgence_TabaccoType) Enum() *JournalIndulgence_TabaccoType {
	p := new(JournalIndulgence_TabaccoType)
	*p = x
	return p
}

func (x JournalIndulgence_TabaccoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalIndulgence_TabaccoType) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[10].Descriptor()
}

func (JournalIndulgence_TabaccoType) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[10]
}

func (x JournalIndulgence_TabaccoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalIndulgence_TabaccoType.Descriptor instead.
func (JournalIndulgence_TabaccoType) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{3, 3}
}

type JournalActivity_WalkingTime int32

const (
	JournalActivity_WALKING_TIME_UNKNOWN JournalActivity_WalkingTime = 0
	JournalActivity_WITHIN_30_MINUTES    JournalActivity_WalkingTime = 1 // 30分未満
	JournalActivity_WITHIN_1_HOUR        JournalActivity_WalkingTime = 2 // 1時間未満
	JournalActivity_WITHIN_2_HOURS       JournalActivity_WalkingTime = 3 // 2時間未満
	JournalActivity_OVER_2_HOURS         JournalActivity_WalkingTime = 4 // 2時間以上
)

// Enum value maps for JournalActivity_WalkingTime.
var (
	JournalActivity_WalkingTime_name = map[int32]string{
		0: "WALKING_TIME_UNKNOWN",
		1: "WITHIN_30_MINUTES",
		2: "WITHIN_1_HOUR",
		3: "WITHIN_2_HOURS",
		4: "OVER_2_HOURS",
	}
	JournalActivity_WalkingTime_value = map[string]int32{
		"WALKING_TIME_UNKNOWN": 0,
		"WITHIN_30_MINUTES":    1,
		"WITHIN_1_HOUR":        2,
		"WITHIN_2_HOURS":       3,
		"OVER_2_HOURS":         4,
	}
)

func (x JournalActivity_WalkingTime) Enum() *JournalActivity_WalkingTime {
	p := new(JournalActivity_WalkingTime)
	*p = x
	return p
}

func (x JournalActivity_WalkingTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalActivity_WalkingTime) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[11].Descriptor()
}

func (JournalActivity_WalkingTime) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[11]
}

func (x JournalActivity_WalkingTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalActivity_WalkingTime.Descriptor instead.
func (JournalActivity_WalkingTime) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{4, 0}
}

type JournalActivity_SittingTime int32

const (
	JournalActivity_SITTING_TIME_UNKNOWN JournalActivity_SittingTime = 0
	JournalActivity_WITHIN_5_HOURS       JournalActivity_SittingTime = 1 // 5時間以内
	JournalActivity_WITHIN_7_HOURS       JournalActivity_SittingTime = 2 // 5-7時間
	JournalActivity_WITHIN_9_HOURS       JournalActivity_SittingTime = 3 // 7-9時間
	JournalActivity_OVER_9_HOURS         JournalActivity_SittingTime = 4 // 9時間以上
)

// Enum value maps for JournalActivity_SittingTime.
var (
	JournalActivity_SittingTime_name = map[int32]string{
		0: "SITTING_TIME_UNKNOWN",
		1: "WITHIN_5_HOURS",
		2: "WITHIN_7_HOURS",
		3: "WITHIN_9_HOURS",
		4: "OVER_9_HOURS",
	}
	JournalActivity_SittingTime_value = map[string]int32{
		"SITTING_TIME_UNKNOWN": 0,
		"WITHIN_5_HOURS":       1,
		"WITHIN_7_HOURS":       2,
		"WITHIN_9_HOURS":       3,
		"OVER_9_HOURS":         4,
	}
)

func (x JournalActivity_SittingTime) Enum() *JournalActivity_SittingTime {
	p := new(JournalActivity_SittingTime)
	*p = x
	return p
}

func (x JournalActivity_SittingTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalActivity_SittingTime) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[12].Descriptor()
}

func (JournalActivity_SittingTime) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[12]
}

func (x JournalActivity_SittingTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalActivity_SittingTime.Descriptor instead.
func (JournalActivity_SittingTime) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{4, 1}
}

type JournalActivity_StrengthTraining int32

const (
	JournalActivity_STRENGTH_TRAINING_UNKNOWN JournalActivity_StrengthTraining = 0
	JournalActivity_BODY_WEIGHT               JournalActivity_StrengthTraining = 1 // 自重トレーニング
	JournalActivity_MACHINE                   JournalActivity_StrengthTraining = 2 // マシントレーニング
	JournalActivity_RESISTANCE                JournalActivity_StrengthTraining = 3 // ウェイトトレーニング
	JournalActivity_HOLISTIC                  JournalActivity_StrengthTraining = 4 // ボディワーク
)

// Enum value maps for JournalActivity_StrengthTraining.
var (
	JournalActivity_StrengthTraining_name = map[int32]string{
		0: "STRENGTH_TRAINING_UNKNOWN",
		1: "BODY_WEIGHT",
		2: "MACHINE",
		3: "RESISTANCE",
		4: "HOLISTIC",
	}
	JournalActivity_StrengthTraining_value = map[string]int32{
		"STRENGTH_TRAINING_UNKNOWN": 0,
		"BODY_WEIGHT":               1,
		"MACHINE":                   2,
		"RESISTANCE":                3,
		"HOLISTIC":                  4,
	}
)

func (x JournalActivity_StrengthTraining) Enum() *JournalActivity_StrengthTraining {
	p := new(JournalActivity_StrengthTraining)
	*p = x
	return p
}

func (x JournalActivity_StrengthTraining) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalActivity_StrengthTraining) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[13].Descriptor()
}

func (JournalActivity_StrengthTraining) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[13]
}

func (x JournalActivity_StrengthTraining) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalActivity_StrengthTraining.Descriptor instead.
func (JournalActivity_StrengthTraining) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{4, 2}
}

type JournalStress_Mood int32

const (
	JournalStress_MOOD_UNKNOWN  JournalStress_Mood = 0
	JournalStress_VERY_NEGATIVE JournalStress_Mood = 1 // すごくネガティブ
	JournalStress_NEGATIVE      JournalStress_Mood = 2 // ネガティブ
	JournalStress_MOOD_NEUTRAL  JournalStress_Mood = 3 // どちらでもない
	JournalStress_POSITIVE      JournalStress_Mood = 4 // ポジティブ
	JournalStress_VERY_POSITIVE JournalStress_Mood = 5 // すごくポジティブ
)

// Enum value maps for JournalStress_Mood.
var (
	JournalStress_Mood_name = map[int32]string{
		0: "MOOD_UNKNOWN",
		1: "VERY_NEGATIVE",
		2: "NEGATIVE",
		3: "MOOD_NEUTRAL",
		4: "POSITIVE",
		5: "VERY_POSITIVE",
	}
	JournalStress_Mood_value = map[string]int32{
		"MOOD_UNKNOWN":  0,
		"VERY_NEGATIVE": 1,
		"NEGATIVE":      2,
		"MOOD_NEUTRAL":  3,
		"POSITIVE":      4,
		"VERY_POSITIVE": 5,
	}
)

func (x JournalStress_Mood) Enum() *JournalStress_Mood {
	p := new(JournalStress_Mood)
	*p = x
	return p
}

func (x JournalStress_Mood) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalStress_Mood) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[14].Descriptor()
}

func (JournalStress_Mood) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[14]
}

func (x JournalStress_Mood) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalStress_Mood.Descriptor instead.
func (JournalStress_Mood) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{5, 0}
}

type JournalStress_Emotion int32

const (
	JournalStress_EMOTION_UNKNOWN JournalStress_Emotion = 0
	JournalStress_VERY_IRRITATED  JournalStress_Emotion = 1 // すごくイライラ
	JournalStress_IRRITATED       JournalStress_Emotion = 2 // イライラ
	JournalStress_EMOTION_NEUTRAL JournalStress_Emotion = 3 // どちらでもない
	JournalStress_CALM            JournalStress_Emotion = 4 // 穏やか
	JournalStress_VERY_CALM       JournalStress_Emotion = 5 // すごく穏やか
)

// Enum value maps for JournalStress_Emotion.
var (
	JournalStress_Emotion_name = map[int32]string{
		0: "EMOTION_UNKNOWN",
		1: "VERY_IRRITATED",
		2: "IRRITATED",
		3: "EMOTION_NEUTRAL",
		4: "CALM",
		5: "VERY_CALM",
	}
	JournalStress_Emotion_value = map[string]int32{
		"EMOTION_UNKNOWN": 0,
		"VERY_IRRITATED":  1,
		"IRRITATED":       2,
		"EMOTION_NEUTRAL": 3,
		"CALM":            4,
		"VERY_CALM":       5,
	}
)

func (x JournalStress_Emotion) Enum() *JournalStress_Emotion {
	p := new(JournalStress_Emotion)
	*p = x
	return p
}

func (x JournalStress_Emotion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalStress_Emotion) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[15].Descriptor()
}

func (JournalStress_Emotion) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[15]
}

func (x JournalStress_Emotion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalStress_Emotion.Descriptor instead.
func (JournalStress_Emotion) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{5, 1}
}

type JournalStress_TalkTime int32

const (
	JournalStress_TALK_TIME_UNKNOWN JournalStress_TalkTime = 0
	JournalStress_NO_TALK_TIME      JournalStress_TalkTime = 1 // なし
	JournalStress_WITHIN_30_MINUTES JournalStress_TalkTime = 2 // 30分未満
	JournalStress_AROUND_1_HOUR     JournalStress_TalkTime = 3 // 約1時間
	JournalStress_AROUND_2_HOURS    JournalStress_TalkTime = 4 // 約2時間
	JournalStress_OVER_3_HOURS      JournalStress_TalkTime = 5 // 3時間以上
)

// Enum value maps for JournalStress_TalkTime.
var (
	JournalStress_TalkTime_name = map[int32]string{
		0: "TALK_TIME_UNKNOWN",
		1: "NO_TALK_TIME",
		2: "WITHIN_30_MINUTES",
		3: "AROUND_1_HOUR",
		4: "AROUND_2_HOURS",
		5: "OVER_3_HOURS",
	}
	JournalStress_TalkTime_value = map[string]int32{
		"TALK_TIME_UNKNOWN": 0,
		"NO_TALK_TIME":      1,
		"WITHIN_30_MINUTES": 2,
		"AROUND_1_HOUR":     3,
		"AROUND_2_HOURS":    4,
		"OVER_3_HOURS":      5,
	}
)

func (x JournalStress_TalkTime) Enum() *JournalStress_TalkTime {
	p := new(JournalStress_TalkTime)
	*p = x
	return p
}

func (x JournalStress_TalkTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JournalStress_TalkTime) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[16].Descriptor()
}

func (JournalStress_TalkTime) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[16]
}

func (x JournalStress_TalkTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JournalStress_TalkTime.Descriptor instead.
func (JournalStress_TalkTime) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{5, 2}
}

type ChallengeScore_Level int32

const (
	ChallengeScore_LEVEL_UNKNOWN ChallengeScore_Level = 0
	ChallengeScore_NO_LEVEL      ChallengeScore_Level = 1
	ChallengeScore_LEVEL_1       ChallengeScore_Level = 2
	ChallengeScore_LEVEL_2       ChallengeScore_Level = 3
	ChallengeScore_LEVEL_3       ChallengeScore_Level = 4
	ChallengeScore_LEVEL_4       ChallengeScore_Level = 5
	ChallengeScore_LEVEL_5       ChallengeScore_Level = 6
)

// Enum value maps for ChallengeScore_Level.
var (
	ChallengeScore_Level_name = map[int32]string{
		0: "LEVEL_UNKNOWN",
		1: "NO_LEVEL",
		2: "LEVEL_1",
		3: "LEVEL_2",
		4: "LEVEL_3",
		5: "LEVEL_4",
		6: "LEVEL_5",
	}
	ChallengeScore_Level_value = map[string]int32{
		"LEVEL_UNKNOWN": 0,
		"NO_LEVEL":      1,
		"LEVEL_1":       2,
		"LEVEL_2":       3,
		"LEVEL_3":       4,
		"LEVEL_4":       5,
		"LEVEL_5":       6,
	}
)

func (x ChallengeScore_Level) Enum() *ChallengeScore_Level {
	p := new(ChallengeScore_Level)
	*p = x
	return p
}

func (x ChallengeScore_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeScore_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[17].Descriptor()
}

func (ChallengeScore_Level) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[17]
}

func (x ChallengeScore_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeScore_Level.Descriptor instead.
func (ChallengeScore_Level) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 0}
}

type ChallengeScore_LabelGroupName int32

const (
	ChallengeScore_LABEL_GROUP_NAME_UNKNOWN ChallengeScore_LabelGroupName = 0
	ChallengeScore_VariationReason          ChallengeScore_LabelGroupName = 1 // 変動理由
	ChallengeScore_ImprovementMethod        ChallengeScore_LabelGroupName = 2 // 改善方法
	ChallengeScore_BonusFactor              ChallengeScore_LabelGroupName = 3 // 加点要因
	ChallengeScore_DeductionFactor          ChallengeScore_LabelGroupName = 4 // 減点要因
)

// Enum value maps for ChallengeScore_LabelGroupName.
var (
	ChallengeScore_LabelGroupName_name = map[int32]string{
		0: "LABEL_GROUP_NAME_UNKNOWN",
		1: "VariationReason",
		2: "ImprovementMethod",
		3: "BonusFactor",
		4: "DeductionFactor",
	}
	ChallengeScore_LabelGroupName_value = map[string]int32{
		"LABEL_GROUP_NAME_UNKNOWN": 0,
		"VariationReason":          1,
		"ImprovementMethod":        2,
		"BonusFactor":              3,
		"DeductionFactor":          4,
	}
)

func (x ChallengeScore_LabelGroupName) Enum() *ChallengeScore_LabelGroupName {
	p := new(ChallengeScore_LabelGroupName)
	*p = x
	return p
}

func (x ChallengeScore_LabelGroupName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeScore_LabelGroupName) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[18].Descriptor()
}

func (ChallengeScore_LabelGroupName) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[18]
}

func (x ChallengeScore_LabelGroupName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeScore_LabelGroupName.Descriptor instead.
func (ChallengeScore_LabelGroupName) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 1}
}

type ChallengeScore_LabelGroupIcon int32

const (
	ChallengeScore_LABEL_GROUP_ICON_UNKNOWN ChallengeScore_LabelGroupIcon = 0
	ChallengeScore_GOOD                     ChallengeScore_LabelGroupIcon = 1 // 良い
	ChallengeScore_BAD                      ChallengeScore_LabelGroupIcon = 2 // 悪い
)

// Enum value maps for ChallengeScore_LabelGroupIcon.
var (
	ChallengeScore_LabelGroupIcon_name = map[int32]string{
		0: "LABEL_GROUP_ICON_UNKNOWN",
		1: "GOOD",
		2: "BAD",
	}
	ChallengeScore_LabelGroupIcon_value = map[string]int32{
		"LABEL_GROUP_ICON_UNKNOWN": 0,
		"GOOD":                     1,
		"BAD":                      2,
	}
)

func (x ChallengeScore_LabelGroupIcon) Enum() *ChallengeScore_LabelGroupIcon {
	p := new(ChallengeScore_LabelGroupIcon)
	*p = x
	return p
}

func (x ChallengeScore_LabelGroupIcon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeScore_LabelGroupIcon) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[19].Descriptor()
}

func (ChallengeScore_LabelGroupIcon) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[19]
}

func (x ChallengeScore_LabelGroupIcon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeScore_LabelGroupIcon.Descriptor instead.
func (ChallengeScore_LabelGroupIcon) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 2}
}

type ChallengeScore_BehaviorOnTap int32

const (
	ChallengeScore_BEHAVIOR_ON_TAP_NONE ChallengeScore_BehaviorOnTap = 0
	ChallengeScore_OPEN_SUBSCORE        ChallengeScore_BehaviorOnTap = 1
	ChallengeScore_OPEN_RELATED_LOG     ChallengeScore_BehaviorOnTap = 2
)

// Enum value maps for ChallengeScore_BehaviorOnTap.
var (
	ChallengeScore_BehaviorOnTap_name = map[int32]string{
		0: "BEHAVIOR_ON_TAP_NONE",
		1: "OPEN_SUBSCORE",
		2: "OPEN_RELATED_LOG",
	}
	ChallengeScore_BehaviorOnTap_value = map[string]int32{
		"BEHAVIOR_ON_TAP_NONE": 0,
		"OPEN_SUBSCORE":        1,
		"OPEN_RELATED_LOG":     2,
	}
)

func (x ChallengeScore_BehaviorOnTap) Enum() *ChallengeScore_BehaviorOnTap {
	p := new(ChallengeScore_BehaviorOnTap)
	*p = x
	return p
}

func (x ChallengeScore_BehaviorOnTap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeScore_BehaviorOnTap) Descriptor() protoreflect.EnumDescriptor {
	return file_lifestylejournal_lifestylejournal_proto_enumTypes[20].Descriptor()
}

func (ChallengeScore_BehaviorOnTap) Type() protoreflect.EnumType {
	return &file_lifestylejournal_lifestylejournal_proto_enumTypes[20]
}

func (x ChallengeScore_BehaviorOnTap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeScore_BehaviorOnTap.Descriptor instead.
func (ChallengeScore_BehaviorOnTap) EnumDescriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 3}
}

// 排便
type BristolStoolScale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BristolStoolScale) Reset() {
	*x = BristolStoolScale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BristolStoolScale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BristolStoolScale) ProtoMessage() {}

func (x *BristolStoolScale) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BristolStoolScale.ProtoReflect.Descriptor instead.
func (*BristolStoolScale) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{0}
}

type JournalSleep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BedTime              int64                             `protobuf:"varint,1,opt,name=bed_time,json=bedTime,proto3" json:"bed_time,omitempty"`                                                                                                                 // 就寝時間
	WakeTime             int64                             `protobuf:"varint,2,opt,name=wake_time,json=wakeTime,proto3" json:"wake_time,omitempty"`                                                                                                              // 起床時間
	FallAsleepDifficulty JournalSleep_FallAsleepDifficulty `protobuf:"varint,3,opt,name=fall_asleep_difficulty,json=fallAsleepDifficulty,proto3,enum=taomics.praman.lifestylejournal.JournalSleep_FallAsleepDifficulty" json:"fall_asleep_difficulty,omitempty"` // 入眠困難感
	FrequentAwakenings   uint32                            `protobuf:"varint,4,opt,name=frequent_awakenings,json=frequentAwakenings,proto3" json:"frequent_awakenings,omitempty"`                                                                                // 中途覚醒
	SleepQuality         JournalSleep_SleepQuality         `protobuf:"varint,5,opt,name=sleep_quality,json=sleepQuality,proto3,enum=taomics.praman.lifestylejournal.JournalSleep_SleepQuality" json:"sleep_quality,omitempty"`                                   // 睡眠休養感
}

func (x *JournalSleep) Reset() {
	*x = JournalSleep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalSleep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalSleep) ProtoMessage() {}

func (x *JournalSleep) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalSleep.ProtoReflect.Descriptor instead.
func (*JournalSleep) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{1}
}

func (x *JournalSleep) GetBedTime() int64 {
	if x != nil {
		return x.BedTime
	}
	return 0
}

func (x *JournalSleep) GetWakeTime() int64 {
	if x != nil {
		return x.WakeTime
	}
	return 0
}

func (x *JournalSleep) GetFallAsleepDifficulty() JournalSleep_FallAsleepDifficulty {
	if x != nil {
		return x.FallAsleepDifficulty
	}
	return JournalSleep_FALL_ASLEEP_DIFFICULTY_UNKNOWN
}

func (x *JournalSleep) GetFrequentAwakenings() uint32 {
	if x != nil {
		return x.FrequentAwakenings
	}
	return 0
}

func (x *JournalSleep) GetSleepQuality() JournalSleep_SleepQuality {
	if x != nil {
		return x.SleepQuality
	}
	return JournalSleep_SLEEP_QUALITY_UNKNOWN
}

type JournalMeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starch JournalMeal_Quantity `protobuf:"varint,1,opt,name=starch,proto3,enum=taomics.praman.lifestylejournal.JournalMeal_Quantity" json:"starch,omitempty"` // 主食
	Main   JournalMeal_Quantity `protobuf:"varint,2,opt,name=main,proto3,enum=taomics.praman.lifestylejournal.JournalMeal_Quantity" json:"main,omitempty"`     // 主菜
	Side   JournalMeal_Quantity `protobuf:"varint,3,opt,name=side,proto3,enum=taomics.praman.lifestylejournal.JournalMeal_Quantity" json:"side,omitempty"`     // 副菜
	Dairy  bool                 `protobuf:"varint,4,opt,name=dairy,proto3" json:"dairy,omitempty"`                                                             // 乳製品
	Fruit  bool                 `protobuf:"varint,5,opt,name=fruit,proto3" json:"fruit,omitempty"`                                                             // 果物
}

func (x *JournalMeal) Reset() {
	*x = JournalMeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalMeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalMeal) ProtoMessage() {}

func (x *JournalMeal) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalMeal.ProtoReflect.Descriptor instead.
func (*JournalMeal) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{2}
}

func (x *JournalMeal) GetStarch() JournalMeal_Quantity {
	if x != nil {
		return x.Starch
	}
	return JournalMeal_ZERO
}

func (x *JournalMeal) GetMain() JournalMeal_Quantity {
	if x != nil {
		return x.Main
	}
	return JournalMeal_ZERO
}

func (x *JournalMeal) GetSide() JournalMeal_Quantity {
	if x != nil {
		return x.Side
	}
	return JournalMeal_ZERO
}

func (x *JournalMeal) GetDairy() bool {
	if x != nil {
		return x.Dairy
	}
	return false
}

func (x *JournalMeal) GetFruit() bool {
	if x != nil {
		return x.Fruit
	}
	return false
}

type JournalIndulgence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in lifestylejournal/lifestylejournal.proto.
	LastEatingTime   int64                              `protobuf:"varint,1,opt,name=last_eating_time,json=lastEatingTime,proto3" json:"last_eating_time,omitempty"`                                                                             // 食事最終摂取時刻
	LastCaffeineTime int64                              `protobuf:"varint,2,opt,name=last_caffeine_time,json=lastCaffeineTime,proto3" json:"last_caffeine_time,omitempty"`                                                                       // カフェイン最終摂取時刻
	CaffeineQuantity JournalIndulgence_CaffeineQuantity `protobuf:"varint,3,opt,name=caffeine_quantity,json=caffeineQuantity,proto3,enum=taomics.praman.lifestylejournal.JournalIndulgence_CaffeineQuantity" json:"caffeine_quantity,omitempty"` // カフェイン摂取量
	AlcoholQuantity  JournalIndulgence_AlcoholQuantity  `protobuf:"varint,4,opt,name=alcohol_quantity,json=alcoholQuantity,proto3,enum=taomics.praman.lifestylejournal.JournalIndulgence_AlcoholQuantity" json:"alcohol_quantity,omitempty"`     // 飲酒量
	TabaccoQuantity  JournalIndulgence_TabaccoQuantity  `protobuf:"varint,5,opt,name=tabacco_quantity,json=tabaccoQuantity,proto3,enum=taomics.praman.lifestylejournal.JournalIndulgence_TabaccoQuantity" json:"tabacco_quantity,omitempty"`     // 喫煙量
	TabaccoType      JournalIndulgence_TabaccoType      `protobuf:"varint,6,opt,name=tabacco_type,json=tabaccoType,proto3,enum=taomics.praman.lifestylejournal.JournalIndulgence_TabaccoType" json:"tabacco_type,omitempty"`                     // 喫煙種類
}

func (x *JournalIndulgence) Reset() {
	*x = JournalIndulgence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalIndulgence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalIndulgence) ProtoMessage() {}

func (x *JournalIndulgence) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalIndulgence.ProtoReflect.Descriptor instead.
func (*JournalIndulgence) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in lifestylejournal/lifestylejournal.proto.
func (x *JournalIndulgence) GetLastEatingTime() int64 {
	if x != nil {
		return x.LastEatingTime
	}
	return 0
}

func (x *JournalIndulgence) GetLastCaffeineTime() int64 {
	if x != nil {
		return x.LastCaffeineTime
	}
	return 0
}

func (x *JournalIndulgence) GetCaffeineQuantity() JournalIndulgence_CaffeineQuantity {
	if x != nil {
		return x.CaffeineQuantity
	}
	return JournalIndulgence_NO_CAFEINE
}

func (x *JournalIndulgence) GetAlcoholQuantity() JournalIndulgence_AlcoholQuantity {
	if x != nil {
		return x.AlcoholQuantity
	}
	return JournalIndulgence_NO_ALCOHOL
}

func (x *JournalIndulgence) GetTabaccoQuantity() JournalIndulgence_TabaccoQuantity {
	if x != nil {
		return x.TabaccoQuantity
	}
	return JournalIndulgence_NO_TABACCO
}

func (x *JournalIndulgence) GetTabaccoType() JournalIndulgence_TabaccoType {
	if x != nil {
		return x.TabaccoType
	}
	return JournalIndulgence_TABACCO_TYPE_NONE
}

type JournalActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WalkingActivity:
	//
	//	*JournalActivity_Steps
	//	*JournalActivity_WalkingTime_
	WalkingActivity isJournalActivity_WalkingActivity `protobuf_oneof:"walking_activity"`
	// Types that are assignable to SittingActivity:
	//
	//	*JournalActivity_SittingTime_
	//	*JournalActivity_SittingMinutes
	SittingActivity   isJournalActivity_SittingActivity  `protobuf_oneof:"sitting_activity"`
	ActivityMinutes   uint32                             `protobuf:"varint,3,opt,name=activity_minutes,json=activityMinutes,proto3" json:"activity_minutes,omitempty"`                                                                                    // 有酸素運動(アクティブ)時間
	StrengthTrainings []JournalActivity_StrengthTraining `protobuf:"varint,4,rep,packed,name=strength_trainings,json=strengthTrainings,proto3,enum=taomics.praman.lifestylejournal.JournalActivity_StrengthTraining" json:"strength_trainings,omitempty"` // 筋トレ
}

func (x *JournalActivity) Reset() {
	*x = JournalActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalActivity) ProtoMessage() {}

func (x *JournalActivity) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalActivity.ProtoReflect.Descriptor instead.
func (*JournalActivity) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{4}
}

func (m *JournalActivity) GetWalkingActivity() isJournalActivity_WalkingActivity {
	if m != nil {
		return m.WalkingActivity
	}
	return nil
}

func (x *JournalActivity) GetSteps() uint32 {
	if x, ok := x.GetWalkingActivity().(*JournalActivity_Steps); ok {
		return x.Steps
	}
	return 0
}

func (x *JournalActivity) GetWalkingTime() JournalActivity_WalkingTime {
	if x, ok := x.GetWalkingActivity().(*JournalActivity_WalkingTime_); ok {
		return x.WalkingTime
	}
	return JournalActivity_WALKING_TIME_UNKNOWN
}

func (m *JournalActivity) GetSittingActivity() isJournalActivity_SittingActivity {
	if m != nil {
		return m.SittingActivity
	}
	return nil
}

func (x *JournalActivity) GetSittingTime() JournalActivity_SittingTime {
	if x, ok := x.GetSittingActivity().(*JournalActivity_SittingTime_); ok {
		return x.SittingTime
	}
	return JournalActivity_SITTING_TIME_UNKNOWN
}

func (x *JournalActivity) GetSittingMinutes() uint32 {
	if x, ok := x.GetSittingActivity().(*JournalActivity_SittingMinutes); ok {
		return x.SittingMinutes
	}
	return 0
}

func (x *JournalActivity) GetActivityMinutes() uint32 {
	if x != nil {
		return x.ActivityMinutes
	}
	return 0
}

func (x *JournalActivity) GetStrengthTrainings() []JournalActivity_StrengthTraining {
	if x != nil {
		return x.StrengthTrainings
	}
	return nil
}

type isJournalActivity_WalkingActivity interface {
	isJournalActivity_WalkingActivity()
}

type JournalActivity_Steps struct {
	Steps uint32 `protobuf:"varint,1,opt,name=steps,proto3,oneof"` // 歩数
}

type JournalActivity_WalkingTime_ struct {
	WalkingTime JournalActivity_WalkingTime `protobuf:"varint,5,opt,name=walking_time,json=walkingTime,proto3,enum=taomics.praman.lifestylejournal.JournalActivity_WalkingTime,oneof"` // 歩行時間
}

func (*JournalActivity_Steps) isJournalActivity_WalkingActivity() {}

func (*JournalActivity_WalkingTime_) isJournalActivity_WalkingActivity() {}

type isJournalActivity_SittingActivity interface {
	isJournalActivity_SittingActivity()
}

type JournalActivity_SittingTime_ struct {
	SittingTime JournalActivity_SittingTime `protobuf:"varint,2,opt,name=sitting_time,json=sittingTime,proto3,enum=taomics.praman.lifestylejournal.JournalActivity_SittingTime,oneof"` // 座位時間
}

type JournalActivity_SittingMinutes struct {
	SittingMinutes uint32 `protobuf:"varint,6,opt,name=sitting_minutes,json=sittingMinutes,proto3,oneof"` // 座位時間（分）
}

func (*JournalActivity_SittingTime_) isJournalActivity_SittingActivity() {}

func (*JournalActivity_SittingMinutes) isJournalActivity_SittingActivity() {}

type JournalStress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DaytimeMood    JournalStress_Mood     `protobuf:"varint,1,opt,name=daytime_mood,json=daytimeMood,proto3,enum=taomics.praman.lifestylejournal.JournalStress_Mood" json:"daytime_mood,omitempty"`             // 日中の気分
	DaytimeEmotion JournalStress_Emotion  `protobuf:"varint,2,opt,name=daytime_emotion,json=daytimeEmotion,proto3,enum=taomics.praman.lifestylejournal.JournalStress_Emotion" json:"daytime_emotion,omitempty"` // 日中のストレス
	StressCoping   bool                   `protobuf:"varint,3,opt,name=stress_coping,json=stressCoping,proto3" json:"stress_coping,omitempty"`                                                                  // ストレスコーピング
	TalkTime       JournalStress_TalkTime `protobuf:"varint,4,opt,name=talk_time,json=talkTime,proto3,enum=taomics.praman.lifestylejournal.JournalStress_TalkTime" json:"talk_time,omitempty"`                  // 1日の会話時間
}

func (x *JournalStress) Reset() {
	*x = JournalStress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalStress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalStress) ProtoMessage() {}

func (x *JournalStress) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalStress.ProtoReflect.Descriptor instead.
func (*JournalStress) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{5}
}

func (x *JournalStress) GetDaytimeMood() JournalStress_Mood {
	if x != nil {
		return x.DaytimeMood
	}
	return JournalStress_MOOD_UNKNOWN
}

func (x *JournalStress) GetDaytimeEmotion() JournalStress_Emotion {
	if x != nil {
		return x.DaytimeEmotion
	}
	return JournalStress_EMOTION_UNKNOWN
}

func (x *JournalStress) GetStressCoping() bool {
	if x != nil {
		return x.StressCoping
	}
	return false
}

func (x *JournalStress) GetTalkTime() JournalStress_TalkTime {
	if x != nil {
		return x.TalkTime
	}
	return JournalStress_TALK_TIME_UNKNOWN
}

type JournalMain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 食事
	Breakfast   *JournalMeal `protobuf:"bytes,1,opt,name=breakfast,proto3" json:"breakfast,omitempty"`                                                                          // 朝食の食事量
	Lunch       *JournalMeal `protobuf:"bytes,2,opt,name=lunch,proto3" json:"lunch,omitempty"`                                                                                  // 昼食の食事量
	Dinner      *JournalMeal `protobuf:"bytes,3,opt,name=dinner,proto3" json:"dinner,omitempty"`                                                                                // 夕食の食事量
	Snacks      *JournalMeal `protobuf:"bytes,4,opt,name=snacks,proto3" json:"snacks,omitempty"`                                                                                // 間食量
	ExtraEnergy ExtraEnergy  `protobuf:"varint,5,opt,name=extra_energy,json=extraEnergy,proto3,enum=taomics.praman.lifestylejournal.ExtraEnergy" json:"extra_energy,omitempty"` // 菓子・飲料
	// 嗜好
	Indulgence *JournalIndulgence `protobuf:"bytes,6,opt,name=indulgence,proto3" json:"indulgence,omitempty"`
	// 運動
	Activity *JournalActivity `protobuf:"bytes,7,opt,name=activity,proto3" json:"activity,omitempty"`
	// 日中の眠気。取得するタイミングが異なるので JournalSleep に含めない。
	DaytimeSleepiness Sleepiness `protobuf:"varint,8,opt,name=daytime_sleepiness,json=daytimeSleepiness,proto3,enum=taomics.praman.lifestylejournal.Sleepiness" json:"daytime_sleepiness,omitempty"`
	// ストレス
	Stress *JournalStress `protobuf:"bytes,9,opt,name=stress,proto3" json:"stress,omitempty"`
	// 食事-追加
	LastEatingTime    int64                  `protobuf:"varint,10,opt,name=last_eating_time,json=lastEatingTime,proto3" json:"last_eating_time,omitempty"`                                                                      // 食事最終摂取時刻
	BristolStoolScale BristolStoolScale_Type `protobuf:"varint,11,opt,name=bristol_stool_scale,json=bristolStoolScale,proto3,enum=taomics.praman.lifestylejournal.BristolStoolScale_Type" json:"bristol_stool_scale,omitempty"` // 排便
	Notes             string                 `protobuf:"bytes,12,opt,name=notes,proto3" json:"notes,omitempty"`                                                                                                                 // 健康メモ
}

func (x *JournalMain) Reset() {
	*x = JournalMain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalMain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalMain) ProtoMessage() {}

func (x *JournalMain) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalMain.ProtoReflect.Descriptor instead.
func (*JournalMain) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{6}
}

func (x *JournalMain) GetBreakfast() *JournalMeal {
	if x != nil {
		return x.Breakfast
	}
	return nil
}

func (x *JournalMain) GetLunch() *JournalMeal {
	if x != nil {
		return x.Lunch
	}
	return nil
}

func (x *JournalMain) GetDinner() *JournalMeal {
	if x != nil {
		return x.Dinner
	}
	return nil
}

func (x *JournalMain) GetSnacks() *JournalMeal {
	if x != nil {
		return x.Snacks
	}
	return nil
}

func (x *JournalMain) GetExtraEnergy() ExtraEnergy {
	if x != nil {
		return x.ExtraEnergy
	}
	return ExtraEnergy_EXTRA_ENERGY_UNKNOWN
}

func (x *JournalMain) GetIndulgence() *JournalIndulgence {
	if x != nil {
		return x.Indulgence
	}
	return nil
}

func (x *JournalMain) GetActivity() *JournalActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *JournalMain) GetDaytimeSleepiness() Sleepiness {
	if x != nil {
		return x.DaytimeSleepiness
	}
	return Sleepiness_SLEEPINESS_UNKNOWN
}

func (x *JournalMain) GetStress() *JournalStress {
	if x != nil {
		return x.Stress
	}
	return nil
}

func (x *JournalMain) GetLastEatingTime() int64 {
	if x != nil {
		return x.LastEatingTime
	}
	return 0
}

func (x *JournalMain) GetBristolStoolScale() BristolStoolScale_Type {
	if x != nil {
		return x.BristolStoolScale
	}
	return BristolStoolScale_BRISTOL_STOOL_SCALE_UNKNOWN
}

func (x *JournalMain) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type JournalBodyMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight  float32 `protobuf:"fixed32,1,opt,name=weight,proto3" json:"weight,omitempty"`                  // 体重
	BodyFat float32 `protobuf:"fixed32,2,opt,name=body_fat,json=bodyFat,proto3" json:"body_fat,omitempty"` // 体脂肪率
}

func (x *JournalBodyMetrics) Reset() {
	*x = JournalBodyMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalBodyMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalBodyMetrics) ProtoMessage() {}

func (x *JournalBodyMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalBodyMetrics.ProtoReflect.Descriptor instead.
func (*JournalBodyMetrics) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{7}
}

func (x *JournalBodyMetrics) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *JournalBodyMetrics) GetBodyFat() float32 {
	if x != nil {
		return x.BodyFat
	}
	return 0
}

type LifestyleJournalKeepingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date          *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TrackerStatus TrackerStatus   `protobuf:"varint,2,opt,name=tracker_status,json=trackerStatus,proto3,enum=taomics.praman.lifestylejournal.TrackerStatus" json:"tracker_status,omitempty"`
	// 睡眠。起床時の問診で記録します。
	Sleep *JournalSleep `protobuf:"bytes,3,opt,name=sleep,proto3" json:"sleep,omitempty"`
	// 身体状況。起床時の問診で計測済みの場合のみ記録します。
	BodyMetrics *JournalBodyMetrics `protobuf:"bytes,5,opt,name=body_metrics,json=bodyMetrics,proto3" json:"body_metrics,omitempty"`
	// 睡眠と身体状況以外。就寝時の問診で記録します。
	Main *JournalMain `protobuf:"bytes,4,opt,name=main,proto3" json:"main,omitempty"`
}

func (x *LifestyleJournalKeepingRequest) Reset() {
	*x = LifestyleJournalKeepingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifestyleJournalKeepingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifestyleJournalKeepingRequest) ProtoMessage() {}

func (x *LifestyleJournalKeepingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifestyleJournalKeepingRequest.ProtoReflect.Descriptor instead.
func (*LifestyleJournalKeepingRequest) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{8}
}

func (x *LifestyleJournalKeepingRequest) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *LifestyleJournalKeepingRequest) GetTrackerStatus() TrackerStatus {
	if x != nil {
		return x.TrackerStatus
	}
	return TrackerStatus_NO_TRACKER
}

func (x *LifestyleJournalKeepingRequest) GetSleep() *JournalSleep {
	if x != nil {
		return x.Sleep
	}
	return nil
}

func (x *LifestyleJournalKeepingRequest) GetBodyMetrics() *JournalBodyMetrics {
	if x != nil {
		return x.BodyMetrics
	}
	return nil
}

func (x *LifestyleJournalKeepingRequest) GetMain() *JournalMain {
	if x != nil {
		return x.Main
	}
	return nil
}

type LifestyleJournalKeepingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LifestyleJournalKeepingResponse) Reset() {
	*x = LifestyleJournalKeepingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifestyleJournalKeepingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifestyleJournalKeepingResponse) ProtoMessage() {}

func (x *LifestyleJournalKeepingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifestyleJournalKeepingResponse.ProtoReflect.Descriptor instead.
func (*LifestyleJournalKeepingResponse) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{9}
}

type ChallengeScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date          *pramanapi.Date              `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // 評価した日付
	Name          string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url           string                       `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"` // 健康課題スコアのヘルプページのURL
	Score         float32                      `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
	ScorePrefix   string                       `protobuf:"bytes,20,opt,name=score_prefix,json=scorePrefix,proto3" json:"score_prefix,omitempty"` // スコアの前置き
	ScoreSuffix   string                       `protobuf:"bytes,21,opt,name=score_suffix,json=scoreSuffix,proto3" json:"score_suffix,omitempty"` // スコアの後置き
	ScoreText     string                       `protobuf:"bytes,13,opt,name=score_text,json=scoreText,proto3" json:"score_text,omitempty"`       // スコアテキスト
	Level         ChallengeScore_Level         `protobuf:"varint,6,opt,name=level,proto3,enum=taomics.praman.lifestylejournal.ChallengeScore_Level" json:"level,omitempty"`
	LabelGroups   []*ChallengeScore_LabelGroup `protobuf:"bytes,7,rep,name=label_groups,json=labelGroups,proto3" json:"label_groups,omitempty"`
	Info          *ChallengeScore_Info         `protobuf:"bytes,14,opt,name=info,proto3" json:"info,omitempty"`                                                                                                             // 情報テーブル
	BehaviorOnTap ChallengeScore_BehaviorOnTap `protobuf:"varint,15,opt,name=behavior_on_tap,json=behaviorOnTap,proto3,enum=taomics.praman.lifestylejournal.ChallengeScore_BehaviorOnTap" json:"behavior_on_tap,omitempty"` // タップ時の挙動
	RelatedLog    recordlog.LogType            `protobuf:"varint,16,opt,name=related_log,json=relatedLog,proto3,enum=taomics.praman.recordlog.LogType" json:"related_log,omitempty"`                                        // 関連ログ
	WeeklyScore   float32                      `protobuf:"fixed32,18,opt,name=weekly_score,json=weeklyScore,proto3" json:"weekly_score,omitempty"`                                                                          // 週間スコア
	MonthlyScore  float32                      `protobuf:"fixed32,19,opt,name=monthly_score,json=monthlyScore,proto3" json:"monthly_score,omitempty"`                                                                       // 月間スコア
	// スコアカードをレンダリングするための詳細情報
	// スコアカードは互いに排他的であり、1つのみセットされます。
	//
	// Types that are assignable to Scorecard:
	//
	//	*ChallengeScore_SimpleScorecard_
	//	*ChallengeScore_BalanceScorecard_
	//	*ChallengeScore_DifferentialScorecard_
	//	*ChallengeScore_MealBalanceScorecard_
	Scorecard          isChallengeScore_Scorecard `protobuf_oneof:"scorecard"`
	SubChallengeScores []*ChallengeScore          `protobuf:"bytes,12,rep,name=sub_challenge_scores,json=subChallengeScores,proto3" json:"sub_challenge_scores,omitempty"` // サブスコア
	// Deprecated
	// Deprecated: Marked as deprecated in lifestylejournal/lifestylejournal.proto.
	ScoreChange float32 `protobuf:"fixed32,5,opt,name=score_change,json=scoreChange,proto3" json:"score_change,omitempty"` // 前回の評価とのスコアの変化
}

func (x *ChallengeScore) Reset() {
	*x = ChallengeScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore) ProtoMessage() {}

func (x *ChallengeScore) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore.ProtoReflect.Descriptor instead.
func (*ChallengeScore) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10}
}

func (x *ChallengeScore) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ChallengeScore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChallengeScore) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ChallengeScore) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ChallengeScore) GetScorePrefix() string {
	if x != nil {
		return x.ScorePrefix
	}
	return ""
}

func (x *ChallengeScore) GetScoreSuffix() string {
	if x != nil {
		return x.ScoreSuffix
	}
	return ""
}

func (x *ChallengeScore) GetScoreText() string {
	if x != nil {
		return x.ScoreText
	}
	return ""
}

func (x *ChallengeScore) GetLevel() ChallengeScore_Level {
	if x != nil {
		return x.Level
	}
	return ChallengeScore_LEVEL_UNKNOWN
}

func (x *ChallengeScore) GetLabelGroups() []*ChallengeScore_LabelGroup {
	if x != nil {
		return x.LabelGroups
	}
	return nil
}

func (x *ChallengeScore) GetInfo() *ChallengeScore_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ChallengeScore) GetBehaviorOnTap() ChallengeScore_BehaviorOnTap {
	if x != nil {
		return x.BehaviorOnTap
	}
	return ChallengeScore_BEHAVIOR_ON_TAP_NONE
}

func (x *ChallengeScore) GetRelatedLog() recordlog.LogType {
	if x != nil {
		return x.RelatedLog
	}
	return recordlog.LogType(0)
}

func (x *ChallengeScore) GetWeeklyScore() float32 {
	if x != nil {
		return x.WeeklyScore
	}
	return 0
}

func (x *ChallengeScore) GetMonthlyScore() float32 {
	if x != nil {
		return x.MonthlyScore
	}
	return 0
}

func (m *ChallengeScore) GetScorecard() isChallengeScore_Scorecard {
	if m != nil {
		return m.Scorecard
	}
	return nil
}

func (x *ChallengeScore) GetSimpleScorecard() *ChallengeScore_SimpleScorecard {
	if x, ok := x.GetScorecard().(*ChallengeScore_SimpleScorecard_); ok {
		return x.SimpleScorecard
	}
	return nil
}

func (x *ChallengeScore) GetBalanceScorecard() *ChallengeScore_BalanceScorecard {
	if x, ok := x.GetScorecard().(*ChallengeScore_BalanceScorecard_); ok {
		return x.BalanceScorecard
	}
	return nil
}

func (x *ChallengeScore) GetDifferentialScorecard() *ChallengeScore_DifferentialScorecard {
	if x, ok := x.GetScorecard().(*ChallengeScore_DifferentialScorecard_); ok {
		return x.DifferentialScorecard
	}
	return nil
}

func (x *ChallengeScore) GetMealBalanceScorecard() *ChallengeScore_MealBalanceScorecard {
	if x, ok := x.GetScorecard().(*ChallengeScore_MealBalanceScorecard_); ok {
		return x.MealBalanceScorecard
	}
	return nil
}

func (x *ChallengeScore) GetSubChallengeScores() []*ChallengeScore {
	if x != nil {
		return x.SubChallengeScores
	}
	return nil
}

// Deprecated: Marked as deprecated in lifestylejournal/lifestylejournal.proto.
func (x *ChallengeScore) GetScoreChange() float32 {
	if x != nil {
		return x.ScoreChange
	}
	return 0
}

type isChallengeScore_Scorecard interface {
	isChallengeScore_Scorecard()
}

type ChallengeScore_SimpleScorecard_ struct {
	SimpleScorecard *ChallengeScore_SimpleScorecard `protobuf:"bytes,8,opt,name=simple_scorecard,json=simpleScorecard,proto3,oneof"`
}

type ChallengeScore_BalanceScorecard_ struct {
	BalanceScorecard *ChallengeScore_BalanceScorecard `protobuf:"bytes,9,opt,name=balance_scorecard,json=balanceScorecard,proto3,oneof"`
}

type ChallengeScore_DifferentialScorecard_ struct {
	DifferentialScorecard *ChallengeScore_DifferentialScorecard `protobuf:"bytes,10,opt,name=differential_scorecard,json=differentialScorecard,proto3,oneof"`
}

type ChallengeScore_MealBalanceScorecard_ struct {
	MealBalanceScorecard *ChallengeScore_MealBalanceScorecard `protobuf:"bytes,11,opt,name=meal_balance_scorecard,json=mealBalanceScorecard,proto3,oneof"`
}

func (*ChallengeScore_SimpleScorecard_) isChallengeScore_Scorecard() {}

func (*ChallengeScore_BalanceScorecard_) isChallengeScore_Scorecard() {}

func (*ChallengeScore_DifferentialScorecard_) isChallengeScore_Scorecard() {}

func (*ChallengeScore_MealBalanceScorecard_) isChallengeScore_Scorecard() {}

type LifestyleJournalEvaluateChallengeScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LifestyleJournalEvaluateChallengeScoresRequest) Reset() {
	*x = LifestyleJournalEvaluateChallengeScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifestyleJournalEvaluateChallengeScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifestyleJournalEvaluateChallengeScoresRequest) ProtoMessage() {}

func (x *LifestyleJournalEvaluateChallengeScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifestyleJournalEvaluateChallengeScoresRequest.ProtoReflect.Descriptor instead.
func (*LifestyleJournalEvaluateChallengeScoresRequest) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{11}
}

type LifestyleJournalEvaluateChallengeScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeScores []*ChallengeScore `protobuf:"bytes,1,rep,name=challenge_scores,json=challengeScores,proto3" json:"challenge_scores,omitempty"`
}

func (x *LifestyleJournalEvaluateChallengeScoresResponse) Reset() {
	*x = LifestyleJournalEvaluateChallengeScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifestyleJournalEvaluateChallengeScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifestyleJournalEvaluateChallengeScoresResponse) ProtoMessage() {}

func (x *LifestyleJournalEvaluateChallengeScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifestyleJournalEvaluateChallengeScoresResponse.ProtoReflect.Descriptor instead.
func (*LifestyleJournalEvaluateChallengeScoresResponse) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{12}
}

func (x *LifestyleJournalEvaluateChallengeScoresResponse) GetChallengeScores() []*ChallengeScore {
	if x != nil {
		return x.ChallengeScores
	}
	return nil
}

// Definitions
type ChallengeScore_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Values map[string]string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChallengeScore_Info) Reset() {
	*x = ChallengeScore_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore_Info) ProtoMessage() {}

func (x *ChallengeScore_Info) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore_Info.ProtoReflect.Descriptor instead.
func (*ChallengeScore_Info) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ChallengeScore_Info) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChallengeScore_Info) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ChallengeScore_LabelGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in lifestylejournal/lifestylejournal.proto.
	Name   ChallengeScore_LabelGroupName `protobuf:"varint,1,opt,name=name,proto3,enum=taomics.praman.lifestylejournal.ChallengeScore_LabelGroupName" json:"name,omitempty"` // title を使用してください
	Title  string                        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Icon   ChallengeScore_LabelGroupIcon `protobuf:"varint,4,opt,name=icon,proto3,enum=taomics.praman.lifestylejournal.ChallengeScore_LabelGroupIcon" json:"icon,omitempty"`
	Labels []*ChallengeScore_Label       `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *ChallengeScore_LabelGroup) Reset() {
	*x = ChallengeScore_LabelGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore_LabelGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore_LabelGroup) ProtoMessage() {}

func (x *ChallengeScore_LabelGroup) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore_LabelGroup.ProtoReflect.Descriptor instead.
func (*ChallengeScore_LabelGroup) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 1}
}

// Deprecated: Marked as deprecated in lifestylejournal/lifestylejournal.proto.
func (x *ChallengeScore_LabelGroup) GetName() ChallengeScore_LabelGroupName {
	if x != nil {
		return x.Name
	}
	return ChallengeScore_LABEL_GROUP_NAME_UNKNOWN
}

func (x *ChallengeScore_LabelGroup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChallengeScore_LabelGroup) GetIcon() ChallengeScore_LabelGroupIcon {
	if x != nil {
		return x.Icon
	}
	return ChallengeScore_LABEL_GROUP_ICON_UNKNOWN
}

func (x *ChallengeScore_LabelGroup) GetLabels() []*ChallengeScore_Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ChallengeScore_Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ChallengeScore_Label) Reset() {
	*x = ChallengeScore_Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore_Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore_Label) ProtoMessage() {}

func (x *ChallengeScore_Label) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore_Label.ProtoReflect.Descriptor instead.
func (*ChallengeScore_Label) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 2}
}

func (x *ChallengeScore_Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChallengeScore_Label) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// シンプルスコアカード
type ChallengeScore_SimpleScorecard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// true: ポジティブスコアカード
	// false: ネガティブスコアカード
	Positive       bool             `protobuf:"varint,1,opt,name=positive,proto3" json:"positive,omitempty"`
	Range          *pramanapi.Range `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Level1Range    *pramanapi.Range `protobuf:"bytes,3,opt,name=level1_range,json=level1Range,proto3" json:"level1_range,omitempty"`
	Level2Range    *pramanapi.Range `protobuf:"bytes,4,opt,name=level2_range,json=level2Range,proto3" json:"level2_range,omitempty"`
	Level3Range    *pramanapi.Range `protobuf:"bytes,5,opt,name=level3_range,json=level3Range,proto3" json:"level3_range,omitempty"`
	Level4Range    *pramanapi.Range `protobuf:"bytes,6,opt,name=level4_range,json=level4Range,proto3" json:"level4_range,omitempty"`
	Level5Range    *pramanapi.Range `protobuf:"bytes,7,opt,name=level5_range,json=level5Range,proto3" json:"level5_range,omitempty"`
	LeftsideLabel  string           `protobuf:"bytes,8,opt,name=leftside_label,json=leftsideLabel,proto3" json:"leftside_label,omitempty"`
	RightsideLabel string           `protobuf:"bytes,9,opt,name=rightside_label,json=rightsideLabel,proto3" json:"rightside_label,omitempty"`
	Interval       int32            `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *ChallengeScore_SimpleScorecard) Reset() {
	*x = ChallengeScore_SimpleScorecard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore_SimpleScorecard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore_SimpleScorecard) ProtoMessage() {}

func (x *ChallengeScore_SimpleScorecard) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore_SimpleScorecard.ProtoReflect.Descriptor instead.
func (*ChallengeScore_SimpleScorecard) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 3}
}

func (x *ChallengeScore_SimpleScorecard) GetPositive() bool {
	if x != nil {
		return x.Positive
	}
	return false
}

func (x *ChallengeScore_SimpleScorecard) GetRange() *pramanapi.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ChallengeScore_SimpleScorecard) GetLevel1Range() *pramanapi.Range {
	if x != nil {
		return x.Level1Range
	}
	return nil
}

func (x *ChallengeScore_SimpleScorecard) GetLevel2Range() *pramanapi.Range {
	if x != nil {
		return x.Level2Range
	}
	return nil
}

func (x *ChallengeScore_SimpleScorecard) GetLevel3Range() *pramanapi.Range {
	if x != nil {
		return x.Level3Range
	}
	return nil
}

func (x *ChallengeScore_SimpleScorecard) GetLevel4Range() *pramanapi.Range {
	if x != nil {
		return x.Level4Range
	}
	return nil
}

func (x *ChallengeScore_SimpleScorecard) GetLevel5Range() *pramanapi.Range {
	if x != nil {
		return x.Level5Range
	}
	return nil
}

func (x *ChallengeScore_SimpleScorecard) GetLeftsideLabel() string {
	if x != nil {
		return x.LeftsideLabel
	}
	return ""
}

func (x *ChallengeScore_SimpleScorecard) GetRightsideLabel() string {
	if x != nil {
		return x.RightsideLabel
	}
	return ""
}

func (x *ChallengeScore_SimpleScorecard) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

// バランススコアカードはレベルを扱わず以下で表現します。
//
// - ニュートラル
// - レフトサイド
// - ライトサイド
// - レッドゾーン
//
// レッドゾーンはレベル５相当です。
type ChallengeScore_BalanceScorecard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range             *pramanapi.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	NeutralRange      *pramanapi.Range `protobuf:"bytes,2,opt,name=neutral_range,json=neutralRange,proto3" json:"neutral_range,omitempty"`
	LeftsideRange     *pramanapi.Range `protobuf:"bytes,3,opt,name=leftside_range,json=leftsideRange,proto3" json:"leftside_range,omitempty"`
	RightsideRange    *pramanapi.Range `protobuf:"bytes,4,opt,name=rightside_range,json=rightsideRange,proto3" json:"rightside_range,omitempty"`
	LeftredzoneRange  *pramanapi.Range `protobuf:"bytes,5,opt,name=leftredzone_range,json=leftredzoneRange,proto3" json:"leftredzone_range,omitempty"`
	RightredzoneRange *pramanapi.Range `protobuf:"bytes,6,opt,name=rightredzone_range,json=rightredzoneRange,proto3" json:"rightredzone_range,omitempty"`
	NewtralLabel      string           `protobuf:"bytes,7,opt,name=newtral_label,json=newtralLabel,proto3" json:"newtral_label,omitempty"`
	LeftsideLabel     string           `protobuf:"bytes,8,opt,name=leftside_label,json=leftsideLabel,proto3" json:"leftside_label,omitempty"`
	RightsideLabel    string           `protobuf:"bytes,9,opt,name=rightside_label,json=rightsideLabel,proto3" json:"rightside_label,omitempty"`
}

func (x *ChallengeScore_BalanceScorecard) Reset() {
	*x = ChallengeScore_BalanceScorecard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore_BalanceScorecard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore_BalanceScorecard) ProtoMessage() {}

func (x *ChallengeScore_BalanceScorecard) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore_BalanceScorecard.ProtoReflect.Descriptor instead.
func (*ChallengeScore_BalanceScorecard) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 4}
}

func (x *ChallengeScore_BalanceScorecard) GetRange() *pramanapi.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ChallengeScore_BalanceScorecard) GetNeutralRange() *pramanapi.Range {
	if x != nil {
		return x.NeutralRange
	}
	return nil
}

func (x *ChallengeScore_BalanceScorecard) GetLeftsideRange() *pramanapi.Range {
	if x != nil {
		return x.LeftsideRange
	}
	return nil
}

func (x *ChallengeScore_BalanceScorecard) GetRightsideRange() *pramanapi.Range {
	if x != nil {
		return x.RightsideRange
	}
	return nil
}

func (x *ChallengeScore_BalanceScorecard) GetLeftredzoneRange() *pramanapi.Range {
	if x != nil {
		return x.LeftredzoneRange
	}
	return nil
}

func (x *ChallengeScore_BalanceScorecard) GetRightredzoneRange() *pramanapi.Range {
	if x != nil {
		return x.RightredzoneRange
	}
	return nil
}

func (x *ChallengeScore_BalanceScorecard) GetNewtralLabel() string {
	if x != nil {
		return x.NewtralLabel
	}
	return ""
}

func (x *ChallengeScore_BalanceScorecard) GetLeftsideLabel() string {
	if x != nil {
		return x.LeftsideLabel
	}
	return ""
}

func (x *ChallengeScore_BalanceScorecard) GetRightsideLabel() string {
	if x != nil {
		return x.RightsideLabel
	}
	return ""
}

// ディファレンシャルスコアカードは比較可能な2つのパラメータとその差分を表します。
type ChallengeScore_DifferentialScorecard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter1 *ChallengeScore_DifferentialScorecard_Parameter `protobuf:"bytes,1,opt,name=parameter1,proto3" json:"parameter1,omitempty"`
	Parameter2 *ChallengeScore_DifferentialScorecard_Parameter `protobuf:"bytes,2,opt,name=parameter2,proto3" json:"parameter2,omitempty"`
	Diff       *ChallengeScore_DifferentialScorecard_Parameter `protobuf:"bytes,3,opt,name=diff,proto3" json:"diff,omitempty"`
	Unit       pramanapi.Unit                                  `protobuf:"varint,4,opt,name=unit,proto3,enum=taomics.praman.Unit" json:"unit,omitempty"`
}

func (x *ChallengeScore_DifferentialScorecard) Reset() {
	*x = ChallengeScore_DifferentialScorecard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore_DifferentialScorecard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore_DifferentialScorecard) ProtoMessage() {}

func (x *ChallengeScore_DifferentialScorecard) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore_DifferentialScorecard.ProtoReflect.Descriptor instead.
func (*ChallengeScore_DifferentialScorecard) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 5}
}

func (x *ChallengeScore_DifferentialScorecard) GetParameter1() *ChallengeScore_DifferentialScorecard_Parameter {
	if x != nil {
		return x.Parameter1
	}
	return nil
}

func (x *ChallengeScore_DifferentialScorecard) GetParameter2() *ChallengeScore_DifferentialScorecard_Parameter {
	if x != nil {
		return x.Parameter2
	}
	return nil
}

func (x *ChallengeScore_DifferentialScorecard) GetDiff() *ChallengeScore_DifferentialScorecard_Parameter {
	if x != nil {
		return x.Diff
	}
	return nil
}

func (x *ChallengeScore_DifferentialScorecard) GetUnit() pramanapi.Unit {
	if x != nil {
		return x.Unit
	}
	return pramanapi.Unit(0)
}

// 食事バランススコアカードは食事バランスを表現する専用のスコアカードです。
type ChallengeScore_MealBalanceScorecard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starch *ChallengeScore_MealBalanceScorecard_MealValue `protobuf:"bytes,1,opt,name=starch,proto3" json:"starch,omitempty"` // 主食
	Main   *ChallengeScore_MealBalanceScorecard_MealValue `protobuf:"bytes,2,opt,name=main,proto3" json:"main,omitempty"`     // 主菜
	Side   *ChallengeScore_MealBalanceScorecard_MealValue `protobuf:"bytes,3,opt,name=side,proto3" json:"side,omitempty"`     // 副菜
	Dairy  *ChallengeScore_MealBalanceScorecard_MealValue `protobuf:"bytes,4,opt,name=dairy,proto3" json:"dairy,omitempty"`   // 乳製品
	Fruit  *ChallengeScore_MealBalanceScorecard_MealValue `protobuf:"bytes,5,opt,name=fruit,proto3" json:"fruit,omitempty"`   // 果物
}

func (x *ChallengeScore_MealBalanceScorecard) Reset() {
	*x = ChallengeScore_MealBalanceScorecard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore_MealBalanceScorecard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore_MealBalanceScorecard) ProtoMessage() {}

func (x *ChallengeScore_MealBalanceScorecard) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore_MealBalanceScorecard.ProtoReflect.Descriptor instead.
func (*ChallengeScore_MealBalanceScorecard) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 6}
}

func (x *ChallengeScore_MealBalanceScorecard) GetStarch() *ChallengeScore_MealBalanceScorecard_MealValue {
	if x != nil {
		return x.Starch
	}
	return nil
}

func (x *ChallengeScore_MealBalanceScorecard) GetMain() *ChallengeScore_MealBalanceScorecard_MealValue {
	if x != nil {
		return x.Main
	}
	return nil
}

func (x *ChallengeScore_MealBalanceScorecard) GetSide() *ChallengeScore_MealBalanceScorecard_MealValue {
	if x != nil {
		return x.Side
	}
	return nil
}

func (x *ChallengeScore_MealBalanceScorecard) GetDairy() *ChallengeScore_MealBalanceScorecard_MealValue {
	if x != nil {
		return x.Dairy
	}
	return nil
}

func (x *ChallengeScore_MealBalanceScorecard) GetFruit() *ChallengeScore_MealBalanceScorecard_MealValue {
	if x != nil {
		return x.Fruit
	}
	return nil
}

type ChallengeScore_DifferentialScorecard_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChallengeScore_DifferentialScorecard_Parameter) Reset() {
	*x = ChallengeScore_DifferentialScorecard_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore_DifferentialScorecard_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore_DifferentialScorecard_Parameter) ProtoMessage() {}

func (x *ChallengeScore_DifferentialScorecard_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore_DifferentialScorecard_Parameter.ProtoReflect.Descriptor instead.
func (*ChallengeScore_DifferentialScorecard_Parameter) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 5, 0}
}

func (x *ChallengeScore_DifferentialScorecard_Parameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChallengeScore_DifferentialScorecard_Parameter) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ChallengeScore_MealBalanceScorecard_MealValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        float32          `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	Range        *pramanapi.Range `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	OptimalRange *pramanapi.Range `protobuf:"bytes,3,opt,name=optimal_range,json=optimalRange,proto3" json:"optimal_range,omitempty"`
}

func (x *ChallengeScore_MealBalanceScorecard_MealValue) Reset() {
	*x = ChallengeScore_MealBalanceScorecard_MealValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeScore_MealBalanceScorecard_MealValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeScore_MealBalanceScorecard_MealValue) ProtoMessage() {}

func (x *ChallengeScore_MealBalanceScorecard_MealValue) ProtoReflect() protoreflect.Message {
	mi := &file_lifestylejournal_lifestylejournal_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeScore_MealBalanceScorecard_MealValue.ProtoReflect.Descriptor instead.
func (*ChallengeScore_MealBalanceScorecard_MealValue) Descriptor() ([]byte, []int) {
	return file_lifestylejournal_lifestylejournal_proto_rawDescGZIP(), []int{10, 6, 0}
}

func (x *ChallengeScore_MealBalanceScorecard_MealValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ChallengeScore_MealBalanceScorecard_MealValue) GetRange() *pramanapi.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ChallengeScore_MealBalanceScorecard_MealValue) GetOptimalRange() *pramanapi.Range {
	if x != nil {
		return x.OptimalRange
	}
	return nil
}

var File_lifestylejournal_lifestylejournal_proto protoreflect.FileDescriptor

var file_lifestylejournal_lifestylejournal_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x0c, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f,
	0x01, 0x0a, 0x11, 0x42, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x42, 0x52, 0x49, 0x53, 0x54, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x32, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x33, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x34, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x35, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x36, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x37, 0x10, 0x08,
	0x22, 0xd6, 0x04, 0x0a, 0x0c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x77, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x16, 0x66, 0x61, 0x6c,
	0x6c, 0x5f, 0x61, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x41, 0x73, 0x6c,
	0x65, 0x65, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x14, 0x66,
	0x61, 0x6c, 0x6c, 0x41, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x0d, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x46, 0x61, 0x6c, 0x6c, 0x41, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x5f, 0x44, 0x49,
	0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x33, 0x30, 0x5f, 0x4d,
	0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x49, 0x54, 0x48,
	0x49, 0x4e, 0x5f, 0x31, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x56, 0x45, 0x52, 0x5f, 0x31, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x22, 0x7b, 0x0a, 0x0c,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x4c, 0x45, 0x45, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x54, 0x4c,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x41, 0x58, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x53, 0x54, 0x46, 0x55, 0x4c, 0x10, 0x05, 0x22, 0xe0, 0x02, 0x0a, 0x0b, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x6c, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x63, 0x68, 0x12, 0x49, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x61, 0x6c, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x6c, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x61, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64,
	0x61, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x75, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x72, 0x75, 0x69, 0x74, 0x22, 0x40, 0x0a, 0x08, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e,
	0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x04, 0x22, 0xf9, 0x07, 0x0a,
	0x11, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x75, 0x6c, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x70,
	0x0a, 0x11, 0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x75, 0x6c, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x61,
	0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10,
	0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x6d, 0x0a, 0x10, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x75, 0x6c, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41,
	0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f,
	0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x6d, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x75, 0x6c, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x61,
	0x62, 0x61, 0x63, 0x63, 0x6f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x74,
	0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x61,
	0x0a, 0x0c, 0x74, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x64, 0x75, 0x6c, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x61, 0x0a, 0x10, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x46, 0x45,
	0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x55, 0x50,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x57, 0x4f, 0x5f, 0x43, 0x55, 0x50, 0x53, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x35, 0x5f, 0x43, 0x55, 0x50,
	0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x35, 0x5f, 0x43, 0x55,
	0x50, 0x53, 0x10, 0x04, 0x22, 0x63, 0x0a, 0x0f, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x41, 0x4c,
	0x43, 0x4f, 0x48, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x54, 0x48, 0x49,
	0x4e, 0x5f, 0x31, 0x5f, 0x47, 0x4f, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x54, 0x48,
	0x49, 0x4e, 0x5f, 0x32, 0x5f, 0x47, 0x4f, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x54,
	0x48, 0x49, 0x4e, 0x5f, 0x33, 0x5f, 0x47, 0x4f, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x33, 0x5f, 0x47, 0x4f, 0x10, 0x04, 0x22, 0x68, 0x0a, 0x0f, 0x54, 0x61, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x50, 0x54, 0x4f, 0x5f, 0x35, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x4f, 0x58, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x4f,
	0x58, 0x10, 0x04, 0x22, 0xa2, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x49,
	0x47, 0x41, 0x52, 0x45, 0x54, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52,
	0x4f, 0x4e, 0x49, 0x43, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x49, 0x47, 0x41, 0x52, 0x45,
	0x54, 0x54, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x49, 0x47, 0x41, 0x52, 0x45, 0x54, 0x54, 0x45, 0x53, 0x5f, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x06, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x07, 0x22, 0xbe, 0x06, 0x0a, 0x0f, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x61, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x57, 0x61, 0x6c,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x73, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x53, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x73,
	0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x69,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x70, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x11, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x77, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x57,
	0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x33, 0x30, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x31, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f,
	0x32, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x32, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x04, 0x22, 0x75, 0x0a, 0x0b, 0x53,
	0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x35,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49, 0x54, 0x48,
	0x49, 0x4e, 0x5f, 0x37, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x39, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x39, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53,
	0x10, 0x04, 0x22, 0x6d, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x57, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e,
	0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10,
	0x04, 0x42, 0x12, 0x0a, 0x10, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xa8, 0x05, 0x0a, 0x0d, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x64,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x4d, 0x6f, 0x6f, 0x64, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x4d,
	0x6f, 0x6f, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x09, 0x74, 0x61, 0x6c,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x6c, 0x0a, 0x04, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x4f, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f,
	0x4f, 0x44, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x22, 0x6f, 0x0a,
	0x07, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x4f, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x52, 0x52, 0x49, 0x54, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x52, 0x52, 0x49, 0x54, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x55, 0x54,
	0x52, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4d, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x4d, 0x10, 0x05, 0x22, 0x83,
	0x01, 0x0a, 0x08, 0x54, 0x61, 0x6c, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x33,
	0x30, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x31, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x32, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x33, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x53, 0x10, 0x05, 0x22, 0xe9, 0x06, 0x0a, 0x0b, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x61, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x66, 0x61, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x66, 0x61, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x05, 0x6c, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x05, 0x6c,
	0x75, 0x6e, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x06, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x61, 0x6c, 0x52, 0x06, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6e,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x6e, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x52, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x6c, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x64, 0x75, 0x6c, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x6c,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x11, 0x64, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x67, 0x0a, 0x13, 0x62, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x6f,
	0x6f, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x42, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x62, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x6c,
	0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0x47, 0x0a, 0x12, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x46, 0x61, 0x74, 0x22, 0x80, 0x03, 0x0a, 0x1e, 0x4c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65,
	0x65, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a,
	0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x05, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x12, 0x56, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x62,
	0x6f, 0x64, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x21, 0x0a, 0x1f,
	0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x4b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8a, 0x22, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5d, 0x0a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x0f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x4f, 0x6e, 0x54, 0x61, 0x70, 0x52, 0x0d, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x4f, 0x6e, 0x54, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x12, 0x6f, 0x0a, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x10, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x7e, 0x0a, 0x16, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x15,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x7c, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x6c, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x14, 0x6d,
	0x65, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x61, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x12, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xb1, 0x01,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x9d, 0x02, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x56, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x52,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x2d, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x1a, 0xe8, 0x03, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x31, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xf8, 0x03, 0x0a, 0x10,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x2b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x0d, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6c, 0x65, 0x66,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x72,
	0x65, 0x64, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x72,
	0x65, 0x64, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x72, 0x65, 0x64, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x72, 0x65, 0x64, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x74, 0x72, 0x61,
	0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x65, 0x66, 0x74, 0x73, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0xbf, 0x03, 0x0a, 0x15, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x6f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x31, 0x12, 0x6f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x32, 0x12, 0x63, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x1a, 0x35, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9f, 0x05, 0x0a, 0x14, 0x4d, 0x65, 0x61,
	0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x66, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x63, 0x68, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x62, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61,
	0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x64, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x64, 0x61, 0x69, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x05, 0x66, 0x72, 0x75, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x72, 0x75, 0x69, 0x74, 0x1a, 0x8a, 0x01,
	0x0a, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x32, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x33, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x34, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x35, 0x10, 0x06, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x04, 0x22, 0x41, 0x0a, 0x0e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4f, 0x44,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x44, 0x10, 0x02, 0x22, 0x52, 0x0a, 0x0d, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x4f, 0x6e, 0x54, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x14,
	0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x50, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x42,
	0x0b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x22, 0x30, 0x0a, 0x2e,
	0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8d,
	0x01, 0x0a, 0x2f, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2a, 0x73,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x54, 0x42, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x49, 0x54, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x57, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50,
	0x4c, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0x74, 0x0a, 0x0a, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f,
	0x53, 0x4c, 0x45, 0x45, 0x50, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x4c, 0x59, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x59, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50,
	0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x54, 0x52, 0x45, 0x4d, 0x45, 0x4c, 0x59,
	0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x59, 0x10, 0x04, 0x2a, 0xe6, 0x01, 0x0a, 0x0b, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x54,
	0x52, 0x41, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x4f, 0x52,
	0x49, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x32, 0x30, 0x30, 0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x4f, 0x52, 0x49, 0x45, 0x53,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x33, 0x30, 0x30,
	0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x34, 0x30, 0x30, 0x5f, 0x4b, 0x49, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x34, 0x30, 0x30, 0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x36, 0x30, 0x30, 0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x4f, 0x52, 0x49, 0x45, 0x53,
	0x10, 0x07, 0x32, 0xeb, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90,
	0x01, 0x0a, 0x0b, 0x4b, 0x65, 0x65, 0x70, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x3f,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x4b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xbc, 0x01, 0x0a, 0x17, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x4f, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x6c,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x70, 0x69,
	0x2f, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lifestylejournal_lifestylejournal_proto_rawDescOnce sync.Once
	file_lifestylejournal_lifestylejournal_proto_rawDescData = file_lifestylejournal_lifestylejournal_proto_rawDesc
)

func file_lifestylejournal_lifestylejournal_proto_rawDescGZIP() []byte {
	file_lifestylejournal_lifestylejournal_proto_rawDescOnce.Do(func() {
		file_lifestylejournal_lifestylejournal_proto_rawDescData = protoimpl.X.CompressGZIP(file_lifestylejournal_lifestylejournal_proto_rawDescData)
	})
	return file_lifestylejournal_lifestylejournal_proto_rawDescData
}

var file_lifestylejournal_lifestylejournal_proto_enumTypes = make([]protoimpl.EnumInfo, 21)
var file_lifestylejournal_lifestylejournal_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_lifestylejournal_lifestylejournal_proto_goTypes = []any{
	(TrackerStatus)(0),                                      // 0: taomics.praman.lifestylejournal.TrackerStatus
	(Sleepiness)(0),                                         // 1: taomics.praman.lifestylejournal.Sleepiness
	(ExtraEnergy)(0),                                        // 2: taomics.praman.lifestylejournal.ExtraEnergy
	(BristolStoolScale_Type)(0),                             // 3: taomics.praman.lifestylejournal.BristolStoolScale.Type
	(JournalSleep_FallAsleepDifficulty)(0),                  // 4: taomics.praman.lifestylejournal.JournalSleep.FallAsleepDifficulty
	(JournalSleep_SleepQuality)(0),                          // 5: taomics.praman.lifestylejournal.JournalSleep.SleepQuality
	(JournalMeal_Quantity)(0),                               // 6: taomics.praman.lifestylejournal.JournalMeal.Quantity
	(JournalIndulgence_CaffeineQuantity)(0),                 // 7: taomics.praman.lifestylejournal.JournalIndulgence.CaffeineQuantity
	(JournalIndulgence_AlcoholQuantity)(0),                  // 8: taomics.praman.lifestylejournal.JournalIndulgence.AlcoholQuantity
	(JournalIndulgence_TabaccoQuantity)(0),                  // 9: taomics.praman.lifestylejournal.JournalIndulgence.TabaccoQuantity
	(JournalIndulgence_TabaccoType)(0),                      // 10: taomics.praman.lifestylejournal.JournalIndulgence.TabaccoType
	(JournalActivity_WalkingTime)(0),                        // 11: taomics.praman.lifestylejournal.JournalActivity.WalkingTime
	(JournalActivity_SittingTime)(0),                        // 12: taomics.praman.lifestylejournal.JournalActivity.SittingTime
	(JournalActivity_StrengthTraining)(0),                   // 13: taomics.praman.lifestylejournal.JournalActivity.StrengthTraining
	(JournalStress_Mood)(0),                                 // 14: taomics.praman.lifestylejournal.JournalStress.Mood
	(JournalStress_Emotion)(0),                              // 15: taomics.praman.lifestylejournal.JournalStress.Emotion
	(JournalStress_TalkTime)(0),                             // 16: taomics.praman.lifestylejournal.JournalStress.TalkTime
	(ChallengeScore_Level)(0),                               // 17: taomics.praman.lifestylejournal.ChallengeScore.Level
	(ChallengeScore_LabelGroupName)(0),                      // 18: taomics.praman.lifestylejournal.ChallengeScore.LabelGroupName
	(ChallengeScore_LabelGroupIcon)(0),                      // 19: taomics.praman.lifestylejournal.ChallengeScore.LabelGroupIcon
	(ChallengeScore_BehaviorOnTap)(0),                       // 20: taomics.praman.lifestylejournal.ChallengeScore.BehaviorOnTap
	(*BristolStoolScale)(nil),                               // 21: taomics.praman.lifestylejournal.BristolStoolScale
	(*JournalSleep)(nil),                                    // 22: taomics.praman.lifestylejournal.JournalSleep
	(*JournalMeal)(nil),                                     // 23: taomics.praman.lifestylejournal.JournalMeal
	(*JournalIndulgence)(nil),                               // 24: taomics.praman.lifestylejournal.JournalIndulgence
	(*JournalActivity)(nil),                                 // 25: taomics.praman.lifestylejournal.JournalActivity
	(*JournalStress)(nil),                                   // 26: taomics.praman.lifestylejournal.JournalStress
	(*JournalMain)(nil),                                     // 27: taomics.praman.lifestylejournal.JournalMain
	(*JournalBodyMetrics)(nil),                              // 28: taomics.praman.lifestylejournal.JournalBodyMetrics
	(*LifestyleJournalKeepingRequest)(nil),                  // 29: taomics.praman.lifestylejournal.LifestyleJournalKeepingRequest
	(*LifestyleJournalKeepingResponse)(nil),                 // 30: taomics.praman.lifestylejournal.LifestyleJournalKeepingResponse
	(*ChallengeScore)(nil),                                  // 31: taomics.praman.lifestylejournal.ChallengeScore
	(*LifestyleJournalEvaluateChallengeScoresRequest)(nil),  // 32: taomics.praman.lifestylejournal.LifestyleJournalEvaluateChallengeScoresRequest
	(*LifestyleJournalEvaluateChallengeScoresResponse)(nil), // 33: taomics.praman.lifestylejournal.LifestyleJournalEvaluateChallengeScoresResponse
	(*ChallengeScore_Info)(nil),                             // 34: taomics.praman.lifestylejournal.ChallengeScore.Info
	(*ChallengeScore_LabelGroup)(nil),                       // 35: taomics.praman.lifestylejournal.ChallengeScore.LabelGroup
	(*ChallengeScore_Label)(nil),                            // 36: taomics.praman.lifestylejournal.ChallengeScore.Label
	(*ChallengeScore_SimpleScorecard)(nil),                  // 37: taomics.praman.lifestylejournal.ChallengeScore.SimpleScorecard
	(*ChallengeScore_BalanceScorecard)(nil),                 // 38: taomics.praman.lifestylejournal.ChallengeScore.BalanceScorecard
	(*ChallengeScore_DifferentialScorecard)(nil),            // 39: taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard
	(*ChallengeScore_MealBalanceScorecard)(nil),             // 40: taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard
	nil, // 41: taomics.praman.lifestylejournal.ChallengeScore.Info.ValuesEntry
	(*ChallengeScore_DifferentialScorecard_Parameter)(nil), // 42: taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard.Parameter
	(*ChallengeScore_MealBalanceScorecard_MealValue)(nil),  // 43: taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.MealValue
	(*pramanapi.Date)(nil),                                 // 44: taomics.praman.Date
	(recordlog.LogType)(0),                                 // 45: taomics.praman.recordlog.LogType
	(*pramanapi.Range)(nil),                                // 46: taomics.praman.Range
	(pramanapi.Unit)(0),                                    // 47: taomics.praman.Unit
}
var file_lifestylejournal_lifestylejournal_proto_depIdxs = []int32{
	4,  // 0: taomics.praman.lifestylejournal.JournalSleep.fall_asleep_difficulty:type_name -> taomics.praman.lifestylejournal.JournalSleep.FallAsleepDifficulty
	5,  // 1: taomics.praman.lifestylejournal.JournalSleep.sleep_quality:type_name -> taomics.praman.lifestylejournal.JournalSleep.SleepQuality
	6,  // 2: taomics.praman.lifestylejournal.JournalMeal.starch:type_name -> taomics.praman.lifestylejournal.JournalMeal.Quantity
	6,  // 3: taomics.praman.lifestylejournal.JournalMeal.main:type_name -> taomics.praman.lifestylejournal.JournalMeal.Quantity
	6,  // 4: taomics.praman.lifestylejournal.JournalMeal.side:type_name -> taomics.praman.lifestylejournal.JournalMeal.Quantity
	7,  // 5: taomics.praman.lifestylejournal.JournalIndulgence.caffeine_quantity:type_name -> taomics.praman.lifestylejournal.JournalIndulgence.CaffeineQuantity
	8,  // 6: taomics.praman.lifestylejournal.JournalIndulgence.alcohol_quantity:type_name -> taomics.praman.lifestylejournal.JournalIndulgence.AlcoholQuantity
	9,  // 7: taomics.praman.lifestylejournal.JournalIndulgence.tabacco_quantity:type_name -> taomics.praman.lifestylejournal.JournalIndulgence.TabaccoQuantity
	10, // 8: taomics.praman.lifestylejournal.JournalIndulgence.tabacco_type:type_name -> taomics.praman.lifestylejournal.JournalIndulgence.TabaccoType
	11, // 9: taomics.praman.lifestylejournal.JournalActivity.walking_time:type_name -> taomics.praman.lifestylejournal.JournalActivity.WalkingTime
	12, // 10: taomics.praman.lifestylejournal.JournalActivity.sitting_time:type_name -> taomics.praman.lifestylejournal.JournalActivity.SittingTime
	13, // 11: taomics.praman.lifestylejournal.JournalActivity.strength_trainings:type_name -> taomics.praman.lifestylejournal.JournalActivity.StrengthTraining
	14, // 12: taomics.praman.lifestylejournal.JournalStress.daytime_mood:type_name -> taomics.praman.lifestylejournal.JournalStress.Mood
	15, // 13: taomics.praman.lifestylejournal.JournalStress.daytime_emotion:type_name -> taomics.praman.lifestylejournal.JournalStress.Emotion
	16, // 14: taomics.praman.lifestylejournal.JournalStress.talk_time:type_name -> taomics.praman.lifestylejournal.JournalStress.TalkTime
	23, // 15: taomics.praman.lifestylejournal.JournalMain.breakfast:type_name -> taomics.praman.lifestylejournal.JournalMeal
	23, // 16: taomics.praman.lifestylejournal.JournalMain.lunch:type_name -> taomics.praman.lifestylejournal.JournalMeal
	23, // 17: taomics.praman.lifestylejournal.JournalMain.dinner:type_name -> taomics.praman.lifestylejournal.JournalMeal
	23, // 18: taomics.praman.lifestylejournal.JournalMain.snacks:type_name -> taomics.praman.lifestylejournal.JournalMeal
	2,  // 19: taomics.praman.lifestylejournal.JournalMain.extra_energy:type_name -> taomics.praman.lifestylejournal.ExtraEnergy
	24, // 20: taomics.praman.lifestylejournal.JournalMain.indulgence:type_name -> taomics.praman.lifestylejournal.JournalIndulgence
	25, // 21: taomics.praman.lifestylejournal.JournalMain.activity:type_name -> taomics.praman.lifestylejournal.JournalActivity
	1,  // 22: taomics.praman.lifestylejournal.JournalMain.daytime_sleepiness:type_name -> taomics.praman.lifestylejournal.Sleepiness
	26, // 23: taomics.praman.lifestylejournal.JournalMain.stress:type_name -> taomics.praman.lifestylejournal.JournalStress
	3,  // 24: taomics.praman.lifestylejournal.JournalMain.bristol_stool_scale:type_name -> taomics.praman.lifestylejournal.BristolStoolScale.Type
	44, // 25: taomics.praman.lifestylejournal.LifestyleJournalKeepingRequest.date:type_name -> taomics.praman.Date
	0,  // 26: taomics.praman.lifestylejournal.LifestyleJournalKeepingRequest.tracker_status:type_name -> taomics.praman.lifestylejournal.TrackerStatus
	22, // 27: taomics.praman.lifestylejournal.LifestyleJournalKeepingRequest.sleep:type_name -> taomics.praman.lifestylejournal.JournalSleep
	28, // 28: taomics.praman.lifestylejournal.LifestyleJournalKeepingRequest.body_metrics:type_name -> taomics.praman.lifestylejournal.JournalBodyMetrics
	27, // 29: taomics.praman.lifestylejournal.LifestyleJournalKeepingRequest.main:type_name -> taomics.praman.lifestylejournal.JournalMain
	44, // 30: taomics.praman.lifestylejournal.ChallengeScore.date:type_name -> taomics.praman.Date
	17, // 31: taomics.praman.lifestylejournal.ChallengeScore.level:type_name -> taomics.praman.lifestylejournal.ChallengeScore.Level
	35, // 32: taomics.praman.lifestylejournal.ChallengeScore.label_groups:type_name -> taomics.praman.lifestylejournal.ChallengeScore.LabelGroup
	34, // 33: taomics.praman.lifestylejournal.ChallengeScore.info:type_name -> taomics.praman.lifestylejournal.ChallengeScore.Info
	20, // 34: taomics.praman.lifestylejournal.ChallengeScore.behavior_on_tap:type_name -> taomics.praman.lifestylejournal.ChallengeScore.BehaviorOnTap
	45, // 35: taomics.praman.lifestylejournal.ChallengeScore.related_log:type_name -> taomics.praman.recordlog.LogType
	37, // 36: taomics.praman.lifestylejournal.ChallengeScore.simple_scorecard:type_name -> taomics.praman.lifestylejournal.ChallengeScore.SimpleScorecard
	38, // 37: taomics.praman.lifestylejournal.ChallengeScore.balance_scorecard:type_name -> taomics.praman.lifestylejournal.ChallengeScore.BalanceScorecard
	39, // 38: taomics.praman.lifestylejournal.ChallengeScore.differential_scorecard:type_name -> taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard
	40, // 39: taomics.praman.lifestylejournal.ChallengeScore.meal_balance_scorecard:type_name -> taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard
	31, // 40: taomics.praman.lifestylejournal.ChallengeScore.sub_challenge_scores:type_name -> taomics.praman.lifestylejournal.ChallengeScore
	31, // 41: taomics.praman.lifestylejournal.LifestyleJournalEvaluateChallengeScoresResponse.challenge_scores:type_name -> taomics.praman.lifestylejournal.ChallengeScore
	41, // 42: taomics.praman.lifestylejournal.ChallengeScore.Info.values:type_name -> taomics.praman.lifestylejournal.ChallengeScore.Info.ValuesEntry
	18, // 43: taomics.praman.lifestylejournal.ChallengeScore.LabelGroup.name:type_name -> taomics.praman.lifestylejournal.ChallengeScore.LabelGroupName
	19, // 44: taomics.praman.lifestylejournal.ChallengeScore.LabelGroup.icon:type_name -> taomics.praman.lifestylejournal.ChallengeScore.LabelGroupIcon
	36, // 45: taomics.praman.lifestylejournal.ChallengeScore.LabelGroup.labels:type_name -> taomics.praman.lifestylejournal.ChallengeScore.Label
	46, // 46: taomics.praman.lifestylejournal.ChallengeScore.SimpleScorecard.range:type_name -> taomics.praman.Range
	46, // 47: taomics.praman.lifestylejournal.ChallengeScore.SimpleScorecard.level1_range:type_name -> taomics.praman.Range
	46, // 48: taomics.praman.lifestylejournal.ChallengeScore.SimpleScorecard.level2_range:type_name -> taomics.praman.Range
	46, // 49: taomics.praman.lifestylejournal.ChallengeScore.SimpleScorecard.level3_range:type_name -> taomics.praman.Range
	46, // 50: taomics.praman.lifestylejournal.ChallengeScore.SimpleScorecard.level4_range:type_name -> taomics.praman.Range
	46, // 51: taomics.praman.lifestylejournal.ChallengeScore.SimpleScorecard.level5_range:type_name -> taomics.praman.Range
	46, // 52: taomics.praman.lifestylejournal.ChallengeScore.BalanceScorecard.range:type_name -> taomics.praman.Range
	46, // 53: taomics.praman.lifestylejournal.ChallengeScore.BalanceScorecard.neutral_range:type_name -> taomics.praman.Range
	46, // 54: taomics.praman.lifestylejournal.ChallengeScore.BalanceScorecard.leftside_range:type_name -> taomics.praman.Range
	46, // 55: taomics.praman.lifestylejournal.ChallengeScore.BalanceScorecard.rightside_range:type_name -> taomics.praman.Range
	46, // 56: taomics.praman.lifestylejournal.ChallengeScore.BalanceScorecard.leftredzone_range:type_name -> taomics.praman.Range
	46, // 57: taomics.praman.lifestylejournal.ChallengeScore.BalanceScorecard.rightredzone_range:type_name -> taomics.praman.Range
	42, // 58: taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard.parameter1:type_name -> taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard.Parameter
	42, // 59: taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard.parameter2:type_name -> taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard.Parameter
	42, // 60: taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard.diff:type_name -> taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard.Parameter
	47, // 61: taomics.praman.lifestylejournal.ChallengeScore.DifferentialScorecard.unit:type_name -> taomics.praman.Unit
	43, // 62: taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.starch:type_name -> taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.MealValue
	43, // 63: taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.main:type_name -> taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.MealValue
	43, // 64: taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.side:type_name -> taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.MealValue
	43, // 65: taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.dairy:type_name -> taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.MealValue
	43, // 66: taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.fruit:type_name -> taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.MealValue
	46, // 67: taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.MealValue.range:type_name -> taomics.praman.Range
	46, // 68: taomics.praman.lifestylejournal.ChallengeScore.MealBalanceScorecard.MealValue.optimal_range:type_name -> taomics.praman.Range
	29, // 69: taomics.praman.lifestylejournal.LifestyleJournalService.KeepJournal:input_type -> taomics.praman.lifestylejournal.LifestyleJournalKeepingRequest
	32, // 70: taomics.praman.lifestylejournal.LifestyleJournalService.EvaluateChallengeScores:input_type -> taomics.praman.lifestylejournal.LifestyleJournalEvaluateChallengeScoresRequest
	30, // 71: taomics.praman.lifestylejournal.LifestyleJournalService.KeepJournal:output_type -> taomics.praman.lifestylejournal.LifestyleJournalKeepingResponse
	33, // 72: taomics.praman.lifestylejournal.LifestyleJournalService.EvaluateChallengeScores:output_type -> taomics.praman.lifestylejournal.LifestyleJournalEvaluateChallengeScoresResponse
	71, // [71:73] is the sub-list for method output_type
	69, // [69:71] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_lifestylejournal_lifestylejournal_proto_init() }
func file_lifestylejournal_lifestylejournal_proto_init() {
	if File_lifestylejournal_lifestylejournal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lifestylejournal_lifestylejournal_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BristolStoolScale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*JournalSleep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*JournalMeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*JournalIndulgence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*JournalActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*JournalStress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*JournalMain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*JournalBodyMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*LifestyleJournalKeepingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*LifestyleJournalKeepingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*LifestyleJournalEvaluateChallengeScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*LifestyleJournalEvaluateChallengeScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore_LabelGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore_Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore_SimpleScorecard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore_BalanceScorecard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore_DifferentialScorecard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore_MealBalanceScorecard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore_DifferentialScorecard_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifestylejournal_lifestylejournal_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeScore_MealBalanceScorecard_MealValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lifestylejournal_lifestylejournal_proto_msgTypes[4].OneofWrappers = []any{
		(*JournalActivity_Steps)(nil),
		(*JournalActivity_WalkingTime_)(nil),
		(*JournalActivity_SittingTime_)(nil),
		(*JournalActivity_SittingMinutes)(nil),
	}
	file_lifestylejournal_lifestylejournal_proto_msgTypes[10].OneofWrappers = []any{
		(*ChallengeScore_SimpleScorecard_)(nil),
		(*ChallengeScore_BalanceScorecard_)(nil),
		(*ChallengeScore_DifferentialScorecard_)(nil),
		(*ChallengeScore_MealBalanceScorecard_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lifestylejournal_lifestylejournal_proto_rawDesc,
			NumEnums:      21,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lifestylejournal_lifestylejournal_proto_goTypes,
		DependencyIndexes: file_lifestylejournal_lifestylejournal_proto_depIdxs,
		EnumInfos:         file_lifestylejournal_lifestylejournal_proto_enumTypes,
		MessageInfos:      file_lifestylejournal_lifestylejournal_proto_msgTypes,
	}.Build()
	File_lifestylejournal_lifestylejournal_proto = out.File
	file_lifestylejournal_lifestylejournal_proto_rawDesc = nil
	file_lifestylejournal_lifestylejournal_proto_goTypes = nil
	file_lifestylejournal_lifestylejournal_proto_depIdxs = nil
}
