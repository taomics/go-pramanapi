// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: accounts/accounts.proto

package accounts

import (
	context "context"
	pramanapi "github.com/taomics/pramanapi"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountsService_CurrentUser_FullMethodName           = "/taomics.praman.accounts.AccountsService/CurrentUser"
	AccountsService_RegisterUser_FullMethodName          = "/taomics.praman.accounts.AccountsService/RegisterUser"
	AccountsService_UpdateUser_FullMethodName            = "/taomics.praman.accounts.AccountsService/UpdateUser"
	AccountsService_CurrentAdvisor_FullMethodName        = "/taomics.praman.accounts.AccountsService/CurrentAdvisor"
	AccountsService_UpdateAdvisor_FullMethodName         = "/taomics.praman.accounts.AccountsService/UpdateAdvisor"
	AccountsService_CreateAuthorization_FullMethodName   = "/taomics.praman.accounts.AccountsService/CreateAuthorization"
	AccountsService_RetrieveAuthorization_FullMethodName = "/taomics.praman.accounts.AccountsService/RetrieveAuthorization"
	AccountsService_GrantAuthorization_FullMethodName    = "/taomics.praman.accounts.AccountsService/GrantAuthorization"
)

// AccountsServiceClient is the client API for AccountsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # AccountsService
//
// Common Errors:
//   - INTERNAL (13): Server is something wrong.
//   - UNAUTHENTICATED (16): Authorization header is something wrong.
type AccountsServiceClient interface {
	// Gets the current user profile using authorization header.
	//
	// Errors:
	//   - PERMISSION_DENIED (7): The requester does not have a user permission.
	CurrentUser(ctx context.Context, in *pramanapi.Empty, opts ...grpc.CallOption) (*AccountsUserFetchResponse, error)
	// Register as user.
	//
	// Errors:
	//   - INVALID_ARGUMENT (3): There is an invalid argument
	RegisterUser(ctx context.Context, in *AccountsUserCreationRequest, opts ...grpc.CallOption) (*AccountsUserCreationResponse, error)
	// Updates current user profile.
	//
	// Errors:
	//   - INVALID_ARGUMENT (3): There is an invalid argument
	//   - PERMISSION_DENIED (7): The requester does not have a user permission.
	UpdateUser(ctx context.Context, in *AccountsUserUpdateRequest, opts ...grpc.CallOption) (*AccountsUserUpdateResponse, error)
	// Gets the current advisor profile using authorization header.
	//
	// Errors:
	//   - PERMISSION_DENIED (7): The requester does not have a advisor
	//     permission.
	CurrentAdvisor(ctx context.Context, in *pramanapi.Empty, opts ...grpc.CallOption) (*AccountsAdvisorFetchResponse, error)
	// Updates current advisor profile.
	//
	// Errors:
	//   - INVALID_ARGUMENT (3): There is an invalid argument
	//   - PERMISSION_DENIED (7): The requester does not have a user permission.
	UpdateAdvisor(ctx context.Context, in *AccountsAdvisorUpdateRequest, opts ...grpc.CallOption) (*AccountsAdvisorUpdateResponse, error)
	// Create an authorization request.
	//
	// Errors:
	//   - INVALID_ARGUMENT (3): There is an invalid argument
	//   - PERMISSION_DENIED (7): The requester does not have a advisor
	//     permission.
	CreateAuthorization(ctx context.Context, in *AccountsAuthorizationCreationRequest, opts ...grpc.CallOption) (*AccountsAuthorizationCreationResponse, error)
	// Gets an authorization request.
	//
	// Errors:
	//   - NOT_FOUND (5): The specified authorization id does not exist.
	//   - PERMISSION_DENIED (7): The requester does not have a user permission.
	RetrieveAuthorization(ctx context.Context, in *AccountsAuthorizationRetrievalRequest, opts ...grpc.CallOption) (*AccountsAuthorizationRetrievalResponse, error)
	// Grant an authorization request.
	//
	// Errors:
	//   - NOT_FOUND (5): The specified authorization id does not exist.
	//   - PERMISSION_DENIED (7):
	//   - The requester does not have a user permission.
	//   - The specified authorization id is for the requester.
	//   - FAILED_PRECONDITION (9): The specified authorization id was already
	//     granted.
	GrantAuthorization(ctx context.Context, in *AccountsAuthorizationGrantRequest, opts ...grpc.CallOption) (*AccountsAuthorizationGrantResponse, error)
}

type accountsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsServiceClient(cc grpc.ClientConnInterface) AccountsServiceClient {
	return &accountsServiceClient{cc}
}

func (c *accountsServiceClient) CurrentUser(ctx context.Context, in *pramanapi.Empty, opts ...grpc.CallOption) (*AccountsUserFetchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsUserFetchResponse)
	err := c.cc.Invoke(ctx, AccountsService_CurrentUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) RegisterUser(ctx context.Context, in *AccountsUserCreationRequest, opts ...grpc.CallOption) (*AccountsUserCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsUserCreationResponse)
	err := c.cc.Invoke(ctx, AccountsService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) UpdateUser(ctx context.Context, in *AccountsUserUpdateRequest, opts ...grpc.CallOption) (*AccountsUserUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsUserUpdateResponse)
	err := c.cc.Invoke(ctx, AccountsService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) CurrentAdvisor(ctx context.Context, in *pramanapi.Empty, opts ...grpc.CallOption) (*AccountsAdvisorFetchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsAdvisorFetchResponse)
	err := c.cc.Invoke(ctx, AccountsService_CurrentAdvisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) UpdateAdvisor(ctx context.Context, in *AccountsAdvisorUpdateRequest, opts ...grpc.CallOption) (*AccountsAdvisorUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsAdvisorUpdateResponse)
	err := c.cc.Invoke(ctx, AccountsService_UpdateAdvisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) CreateAuthorization(ctx context.Context, in *AccountsAuthorizationCreationRequest, opts ...grpc.CallOption) (*AccountsAuthorizationCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsAuthorizationCreationResponse)
	err := c.cc.Invoke(ctx, AccountsService_CreateAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) RetrieveAuthorization(ctx context.Context, in *AccountsAuthorizationRetrievalRequest, opts ...grpc.CallOption) (*AccountsAuthorizationRetrievalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsAuthorizationRetrievalResponse)
	err := c.cc.Invoke(ctx, AccountsService_RetrieveAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) GrantAuthorization(ctx context.Context, in *AccountsAuthorizationGrantRequest, opts ...grpc.CallOption) (*AccountsAuthorizationGrantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsAuthorizationGrantResponse)
	err := c.cc.Invoke(ctx, AccountsService_GrantAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServiceServer is the server API for AccountsService service.
// All implementations must embed UnimplementedAccountsServiceServer
// for forward compatibility.
//
// # AccountsService
//
// Common Errors:
//   - INTERNAL (13): Server is something wrong.
//   - UNAUTHENTICATED (16): Authorization header is something wrong.
type AccountsServiceServer interface {
	// Gets the current user profile using authorization header.
	//
	// Errors:
	//   - PERMISSION_DENIED (7): The requester does not have a user permission.
	CurrentUser(context.Context, *pramanapi.Empty) (*AccountsUserFetchResponse, error)
	// Register as user.
	//
	// Errors:
	//   - INVALID_ARGUMENT (3): There is an invalid argument
	RegisterUser(context.Context, *AccountsUserCreationRequest) (*AccountsUserCreationResponse, error)
	// Updates current user profile.
	//
	// Errors:
	//   - INVALID_ARGUMENT (3): There is an invalid argument
	//   - PERMISSION_DENIED (7): The requester does not have a user permission.
	UpdateUser(context.Context, *AccountsUserUpdateRequest) (*AccountsUserUpdateResponse, error)
	// Gets the current advisor profile using authorization header.
	//
	// Errors:
	//   - PERMISSION_DENIED (7): The requester does not have a advisor
	//     permission.
	CurrentAdvisor(context.Context, *pramanapi.Empty) (*AccountsAdvisorFetchResponse, error)
	// Updates current advisor profile.
	//
	// Errors:
	//   - INVALID_ARGUMENT (3): There is an invalid argument
	//   - PERMISSION_DENIED (7): The requester does not have a user permission.
	UpdateAdvisor(context.Context, *AccountsAdvisorUpdateRequest) (*AccountsAdvisorUpdateResponse, error)
	// Create an authorization request.
	//
	// Errors:
	//   - INVALID_ARGUMENT (3): There is an invalid argument
	//   - PERMISSION_DENIED (7): The requester does not have a advisor
	//     permission.
	CreateAuthorization(context.Context, *AccountsAuthorizationCreationRequest) (*AccountsAuthorizationCreationResponse, error)
	// Gets an authorization request.
	//
	// Errors:
	//   - NOT_FOUND (5): The specified authorization id does not exist.
	//   - PERMISSION_DENIED (7): The requester does not have a user permission.
	RetrieveAuthorization(context.Context, *AccountsAuthorizationRetrievalRequest) (*AccountsAuthorizationRetrievalResponse, error)
	// Grant an authorization request.
	//
	// Errors:
	//   - NOT_FOUND (5): The specified authorization id does not exist.
	//   - PERMISSION_DENIED (7):
	//   - The requester does not have a user permission.
	//   - The specified authorization id is for the requester.
	//   - FAILED_PRECONDITION (9): The specified authorization id was already
	//     granted.
	GrantAuthorization(context.Context, *AccountsAuthorizationGrantRequest) (*AccountsAuthorizationGrantResponse, error)
	mustEmbedUnimplementedAccountsServiceServer()
}

// UnimplementedAccountsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountsServiceServer struct{}

func (UnimplementedAccountsServiceServer) CurrentUser(context.Context, *pramanapi.Empty) (*AccountsUserFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (UnimplementedAccountsServiceServer) RegisterUser(context.Context, *AccountsUserCreationRequest) (*AccountsUserCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedAccountsServiceServer) UpdateUser(context.Context, *AccountsUserUpdateRequest) (*AccountsUserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAccountsServiceServer) CurrentAdvisor(context.Context, *pramanapi.Empty) (*AccountsAdvisorFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentAdvisor not implemented")
}
func (UnimplementedAccountsServiceServer) UpdateAdvisor(context.Context, *AccountsAdvisorUpdateRequest) (*AccountsAdvisorUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdvisor not implemented")
}
func (UnimplementedAccountsServiceServer) CreateAuthorization(context.Context, *AccountsAuthorizationCreationRequest) (*AccountsAuthorizationCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorization not implemented")
}
func (UnimplementedAccountsServiceServer) RetrieveAuthorization(context.Context, *AccountsAuthorizationRetrievalRequest) (*AccountsAuthorizationRetrievalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAuthorization not implemented")
}
func (UnimplementedAccountsServiceServer) GrantAuthorization(context.Context, *AccountsAuthorizationGrantRequest) (*AccountsAuthorizationGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthorization not implemented")
}
func (UnimplementedAccountsServiceServer) mustEmbedUnimplementedAccountsServiceServer() {}
func (UnimplementedAccountsServiceServer) testEmbeddedByValue()                         {}

// UnsafeAccountsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServiceServer will
// result in compilation errors.
type UnsafeAccountsServiceServer interface {
	mustEmbedUnimplementedAccountsServiceServer()
}

func RegisterAccountsServiceServer(s grpc.ServiceRegistrar, srv AccountsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountsService_ServiceDesc, srv)
}

func _AccountsService_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pramanapi.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_CurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).CurrentUser(ctx, req.(*pramanapi.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsUserCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).RegisterUser(ctx, req.(*AccountsUserCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).UpdateUser(ctx, req.(*AccountsUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_CurrentAdvisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pramanapi.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).CurrentAdvisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_CurrentAdvisor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).CurrentAdvisor(ctx, req.(*pramanapi.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_UpdateAdvisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsAdvisorUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).UpdateAdvisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_UpdateAdvisor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).UpdateAdvisor(ctx, req.(*AccountsAdvisorUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_CreateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsAuthorizationCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).CreateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_CreateAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).CreateAuthorization(ctx, req.(*AccountsAuthorizationCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_RetrieveAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsAuthorizationRetrievalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).RetrieveAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_RetrieveAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).RetrieveAuthorization(ctx, req.(*AccountsAuthorizationRetrievalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_GrantAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsAuthorizationGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).GrantAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_GrantAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).GrantAuthorization(ctx, req.(*AccountsAuthorizationGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountsService_ServiceDesc is the grpc.ServiceDesc for AccountsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taomics.praman.accounts.AccountsService",
	HandlerType: (*AccountsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentUser",
			Handler:    _AccountsService_CurrentUser_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _AccountsService_RegisterUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AccountsService_UpdateUser_Handler,
		},
		{
			MethodName: "CurrentAdvisor",
			Handler:    _AccountsService_CurrentAdvisor_Handler,
		},
		{
			MethodName: "UpdateAdvisor",
			Handler:    _AccountsService_UpdateAdvisor_Handler,
		},
		{
			MethodName: "CreateAuthorization",
			Handler:    _AccountsService_CreateAuthorization_Handler,
		},
		{
			MethodName: "RetrieveAuthorization",
			Handler:    _AccountsService_RetrieveAuthorization_Handler,
		},
		{
			MethodName: "GrantAuthorization",
			Handler:    _AccountsService_GrantAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts/accounts.proto",
}
