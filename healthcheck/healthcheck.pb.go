// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: healthcheck/healthcheck.proto

package healthcheck

import (
	pramanapi "github.com/taomics/pramanapi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HealthCheckParameter_HealthRisk int32

const (
	HealthCheckParameter_HEALTH_RISK_UNKNOWN HealthCheckParameter_HealthRisk = 0
	HealthCheckParameter_HEALTH_RISK_LOW     HealthCheckParameter_HealthRisk = 1 // 現状維持
	HealthCheckParameter_HEALTH_RISK_MIDDLE  HealthCheckParameter_HealthRisk = 2 // 注意が必要
	HealthCheckParameter_HEALTH_RISK_HIGH    HealthCheckParameter_HealthRisk = 3 // 特に注意が必要
)

// Enum value maps for HealthCheckParameter_HealthRisk.
var (
	HealthCheckParameter_HealthRisk_name = map[int32]string{
		0: "HEALTH_RISK_UNKNOWN",
		1: "HEALTH_RISK_LOW",
		2: "HEALTH_RISK_MIDDLE",
		3: "HEALTH_RISK_HIGH",
	}
	HealthCheckParameter_HealthRisk_value = map[string]int32{
		"HEALTH_RISK_UNKNOWN": 0,
		"HEALTH_RISK_LOW":     1,
		"HEALTH_RISK_MIDDLE":  2,
		"HEALTH_RISK_HIGH":    3,
	}
)

func (x HealthCheckParameter_HealthRisk) Enum() *HealthCheckParameter_HealthRisk {
	p := new(HealthCheckParameter_HealthRisk)
	*p = x
	return p
}

func (x HealthCheckParameter_HealthRisk) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckParameter_HealthRisk) Descriptor() protoreflect.EnumDescriptor {
	return file_healthcheck_healthcheck_proto_enumTypes[0].Descriptor()
}

func (HealthCheckParameter_HealthRisk) Type() protoreflect.EnumType {
	return &file_healthcheck_healthcheck_proto_enumTypes[0]
}

func (x HealthCheckParameter_HealthRisk) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckParameter_HealthRisk.Descriptor instead.
func (HealthCheckParameter_HealthRisk) EnumDescriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{0, 0}
}

type HealthCheckParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                  // パラメータ名
	Unit                  string                                 `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`                                                                  // パラメータの単位
	Description           string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                    // パラメータの説明
	CurrentValue          float32                                `protobuf:"fixed32,4,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`                            // 最新の健診結果
	PredictedValue_1Year  float32                                `protobuf:"fixed32,5,opt,name=predicted_value_1year,json=predictedValue1year,proto3" json:"predicted_value_1year,omitempty"`     // 1年後の健診結果
	PredictedValue_3Years float32                                `protobuf:"fixed32,6,opt,name=predicted_value_3years,json=predictedValue3years,proto3" json:"predicted_value_3years,omitempty"`  // 3年後の健診結果
	Risk                  HealthCheckParameter_HealthRisk        `protobuf:"varint,7,opt,name=risk,proto3,enum=taomics.praman.healthcheck.HealthCheckParameter_HealthRisk" json:"risk,omitempty"` // パラメータのリスクレベル
	CautionNote           string                                 `protobuf:"bytes,8,opt,name=caution_note,json=cautionNote,proto3" json:"caution_note,omitempty"`                                 // パラメータの注意事項
	Recommendations       []*HealthCheckParameter_Recommendation `protobuf:"bytes,9,rep,name=recommendations,proto3" json:"recommendations,omitempty"`                                            // 優先して改善すべき問診項目
	// 基準値
	//
	// 基準値は基本的には一律に定まっていますが一部ユーザー毎に異なるためレスポンスに含めます。
	// また、基準値のリスクレベルはパラメータによって範囲と種類が異なります。例えば下限と上限に2つの「注意が必要」レベルの範囲があるものがある一方で、「特に注意が必要」レベルの範囲がないものがあります。
	ReferenceRanges []*HealthCheckParameter_ReferenceRange `protobuf:"bytes,10,rep,name=reference_ranges,json=referenceRanges,proto3" json:"reference_ranges,omitempty"`
}

func (x *HealthCheckParameter) Reset() {
	*x = HealthCheckParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_healthcheck_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckParameter) ProtoMessage() {}

func (x *HealthCheckParameter) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_healthcheck_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckParameter.ProtoReflect.Descriptor instead.
func (*HealthCheckParameter) Descriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{0}
}

func (x *HealthCheckParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HealthCheckParameter) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *HealthCheckParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HealthCheckParameter) GetCurrentValue() float32 {
	if x != nil {
		return x.CurrentValue
	}
	return 0
}

func (x *HealthCheckParameter) GetPredictedValue_1Year() float32 {
	if x != nil {
		return x.PredictedValue_1Year
	}
	return 0
}

func (x *HealthCheckParameter) GetPredictedValue_3Years() float32 {
	if x != nil {
		return x.PredictedValue_3Years
	}
	return 0
}

func (x *HealthCheckParameter) GetRisk() HealthCheckParameter_HealthRisk {
	if x != nil {
		return x.Risk
	}
	return HealthCheckParameter_HEALTH_RISK_UNKNOWN
}

func (x *HealthCheckParameter) GetCautionNote() string {
	if x != nil {
		return x.CautionNote
	}
	return ""
}

func (x *HealthCheckParameter) GetRecommendations() []*HealthCheckParameter_Recommendation {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *HealthCheckParameter) GetReferenceRanges() []*HealthCheckParameter_ReferenceRange {
	if x != nil {
		return x.ReferenceRanges
	}
	return nil
}

type HealthCheckUploadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer     string                          `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`                           // 医療機関名
	IssuerCode string                          `protobuf:"bytes,2,opt,name=issuer_code,json=issuerCode,proto3" json:"issuer_code,omitempty"` // 処方箋発行医療機関コード
	IssueDate  *pramanapi.Date                 `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`    // QRコード発行日
	Results    []*HealthCheckUploadData_Result `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`                         // 健康診断結果
}

func (x *HealthCheckUploadData) Reset() {
	*x = HealthCheckUploadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_healthcheck_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckUploadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckUploadData) ProtoMessage() {}

func (x *HealthCheckUploadData) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_healthcheck_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckUploadData.ProtoReflect.Descriptor instead.
func (*HealthCheckUploadData) Descriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckUploadData) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *HealthCheckUploadData) GetIssuerCode() string {
	if x != nil {
		return x.IssuerCode
	}
	return ""
}

func (x *HealthCheckUploadData) GetIssueDate() *pramanapi.Date {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *HealthCheckUploadData) GetResults() []*HealthCheckUploadData_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type HealthCheckPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 健診の日付。何も指定がなければ最新の結果を返します。
	Date *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *HealthCheckPredictionRequest) Reset() {
	*x = HealthCheckPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_healthcheck_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckPredictionRequest) ProtoMessage() {}

func (x *HealthCheckPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_healthcheck_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckPredictionRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckPredictionRequest) Descriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{2}
}

func (x *HealthCheckPredictionRequest) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type HealthCheckPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 健診日
	Date *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// 健診結果と予測
	// 最新の健診結果と1年後、3年後の健診結果を健康診断項目毎に返します。
	// 1年後の健診結果と3年後の値は、最新の健診結果から予測された値です。
	Parameters []*HealthCheckParameter `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *HealthCheckPredictionResponse) Reset() {
	*x = HealthCheckPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_healthcheck_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckPredictionResponse) ProtoMessage() {}

func (x *HealthCheckPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_healthcheck_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckPredictionResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckPredictionResponse) Descriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{3}
}

func (x *HealthCheckPredictionResponse) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *HealthCheckPredictionResponse) GetParameters() []*HealthCheckParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type UploadHealthCheckResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HealthCheckUploadData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UploadHealthCheckResultRequest) Reset() {
	*x = UploadHealthCheckResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_healthcheck_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadHealthCheckResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadHealthCheckResultRequest) ProtoMessage() {}

func (x *UploadHealthCheckResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_healthcheck_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadHealthCheckResultRequest.ProtoReflect.Descriptor instead.
func (*UploadHealthCheckResultRequest) Descriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{4}
}

func (x *UploadHealthCheckResultRequest) GetData() *HealthCheckUploadData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadHealthCheckResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadHealthCheckResultResponse) Reset() {
	*x = UploadHealthCheckResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_healthcheck_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadHealthCheckResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadHealthCheckResultResponse) ProtoMessage() {}

func (x *UploadHealthCheckResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_healthcheck_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadHealthCheckResultResponse.ProtoReflect.Descriptor instead.
func (*UploadHealthCheckResultResponse) Descriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{5}
}

type HealthCheckParameter_Recommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"` // 問診名
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // 問診へのアドバイス
}

func (x *HealthCheckParameter_Recommendation) Reset() {
	*x = HealthCheckParameter_Recommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_healthcheck_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckParameter_Recommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckParameter_Recommendation) ProtoMessage() {}

func (x *HealthCheckParameter_Recommendation) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_healthcheck_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckParameter_Recommendation.ProtoReflect.Descriptor instead.
func (*HealthCheckParameter_Recommendation) Descriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HealthCheckParameter_Recommendation) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *HealthCheckParameter_Recommendation) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type HealthCheckParameter_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Risk  HealthCheckParameter_HealthRisk `protobuf:"varint,1,opt,name=risk,proto3,enum=taomics.praman.healthcheck.HealthCheckParameter_HealthRisk" json:"risk,omitempty"` // リスクレベル
	Range *pramanapi.Range                `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`                                                                // 範囲
}

func (x *HealthCheckParameter_ReferenceRange) Reset() {
	*x = HealthCheckParameter_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_healthcheck_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckParameter_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckParameter_ReferenceRange) ProtoMessage() {}

func (x *HealthCheckParameter_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_healthcheck_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckParameter_ReferenceRange.ProtoReflect.Descriptor instead.
func (*HealthCheckParameter_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{0, 1}
}

func (x *HealthCheckParameter_ReferenceRange) GetRisk() HealthCheckParameter_HealthRisk {
	if x != nil {
		return x.Risk
	}
	return HealthCheckParameter_HEALTH_RISK_UNKNOWN
}

func (x *HealthCheckParameter_ReferenceRange) GetRange() *pramanapi.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type HealthCheckUploadData_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // 健康診断受信日
	Ver  string          `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`   // 健康診断データバージョン
	Data string          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // 健康診断データ
}

func (x *HealthCheckUploadData_Result) Reset() {
	*x = HealthCheckUploadData_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_healthcheck_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckUploadData_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckUploadData_Result) ProtoMessage() {}

func (x *HealthCheckUploadData_Result) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_healthcheck_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckUploadData_Result.ProtoReflect.Descriptor instead.
func (*HealthCheckUploadData_Result) Descriptor() ([]byte, []int) {
	return file_healthcheck_healthcheck_proto_rawDescGZIP(), []int{1, 0}
}

func (x *HealthCheckUploadData_Result) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *HealthCheckUploadData_Result) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

func (x *HealthCheckUploadData_Result) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_healthcheck_healthcheck_proto protoreflect.FileDescriptor

var file_healthcheck_healthcheck_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x0c, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x06, 0x0a, 0x14, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x31, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x79, 0x65, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x33, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x79, 0x65, 0x61, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x04, 0x72,
	0x69, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x69, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x10, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x44, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x8e, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x4f, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b,
	0x12, 0x2b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x68, 0x0a,
	0x0a, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x13, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x22, 0xb3, 0x02, 0x0a, 0x15, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x52, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0x58, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a,
	0x1c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x67, 0x0a, 0x1e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x21,
	0x0a, 0x1f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xb5, 0x02, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x38, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3a, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2f,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_healthcheck_healthcheck_proto_rawDescOnce sync.Once
	file_healthcheck_healthcheck_proto_rawDescData = file_healthcheck_healthcheck_proto_rawDesc
)

func file_healthcheck_healthcheck_proto_rawDescGZIP() []byte {
	file_healthcheck_healthcheck_proto_rawDescOnce.Do(func() {
		file_healthcheck_healthcheck_proto_rawDescData = protoimpl.X.CompressGZIP(file_healthcheck_healthcheck_proto_rawDescData)
	})
	return file_healthcheck_healthcheck_proto_rawDescData
}

var file_healthcheck_healthcheck_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_healthcheck_healthcheck_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_healthcheck_healthcheck_proto_goTypes = []any{
	(HealthCheckParameter_HealthRisk)(0),        // 0: taomics.praman.healthcheck.HealthCheckParameter.HealthRisk
	(*HealthCheckParameter)(nil),                // 1: taomics.praman.healthcheck.HealthCheckParameter
	(*HealthCheckUploadData)(nil),               // 2: taomics.praman.healthcheck.HealthCheckUploadData
	(*HealthCheckPredictionRequest)(nil),        // 3: taomics.praman.healthcheck.HealthCheckPredictionRequest
	(*HealthCheckPredictionResponse)(nil),       // 4: taomics.praman.healthcheck.HealthCheckPredictionResponse
	(*UploadHealthCheckResultRequest)(nil),      // 5: taomics.praman.healthcheck.UploadHealthCheckResultRequest
	(*UploadHealthCheckResultResponse)(nil),     // 6: taomics.praman.healthcheck.UploadHealthCheckResultResponse
	(*HealthCheckParameter_Recommendation)(nil), // 7: taomics.praman.healthcheck.HealthCheckParameter.Recommendation
	(*HealthCheckParameter_ReferenceRange)(nil), // 8: taomics.praman.healthcheck.HealthCheckParameter.ReferenceRange
	(*HealthCheckUploadData_Result)(nil),        // 9: taomics.praman.healthcheck.HealthCheckUploadData.Result
	(*pramanapi.Date)(nil),                      // 10: taomics.praman.Date
	(*pramanapi.Range)(nil),                     // 11: taomics.praman.Range
}
var file_healthcheck_healthcheck_proto_depIdxs = []int32{
	0,  // 0: taomics.praman.healthcheck.HealthCheckParameter.risk:type_name -> taomics.praman.healthcheck.HealthCheckParameter.HealthRisk
	7,  // 1: taomics.praman.healthcheck.HealthCheckParameter.recommendations:type_name -> taomics.praman.healthcheck.HealthCheckParameter.Recommendation
	8,  // 2: taomics.praman.healthcheck.HealthCheckParameter.reference_ranges:type_name -> taomics.praman.healthcheck.HealthCheckParameter.ReferenceRange
	10, // 3: taomics.praman.healthcheck.HealthCheckUploadData.issue_date:type_name -> taomics.praman.Date
	9,  // 4: taomics.praman.healthcheck.HealthCheckUploadData.results:type_name -> taomics.praman.healthcheck.HealthCheckUploadData.Result
	10, // 5: taomics.praman.healthcheck.HealthCheckPredictionRequest.date:type_name -> taomics.praman.Date
	10, // 6: taomics.praman.healthcheck.HealthCheckPredictionResponse.date:type_name -> taomics.praman.Date
	1,  // 7: taomics.praman.healthcheck.HealthCheckPredictionResponse.parameters:type_name -> taomics.praman.healthcheck.HealthCheckParameter
	2,  // 8: taomics.praman.healthcheck.UploadHealthCheckResultRequest.data:type_name -> taomics.praman.healthcheck.HealthCheckUploadData
	0,  // 9: taomics.praman.healthcheck.HealthCheckParameter.ReferenceRange.risk:type_name -> taomics.praman.healthcheck.HealthCheckParameter.HealthRisk
	11, // 10: taomics.praman.healthcheck.HealthCheckParameter.ReferenceRange.range:type_name -> taomics.praman.Range
	10, // 11: taomics.praman.healthcheck.HealthCheckUploadData.Result.date:type_name -> taomics.praman.Date
	3,  // 12: taomics.praman.healthcheck.HealthCheckService.PredictHealthCheck:input_type -> taomics.praman.healthcheck.HealthCheckPredictionRequest
	5,  // 13: taomics.praman.healthcheck.HealthCheckService.UploadHealthCheckResult:input_type -> taomics.praman.healthcheck.UploadHealthCheckResultRequest
	4,  // 14: taomics.praman.healthcheck.HealthCheckService.PredictHealthCheck:output_type -> taomics.praman.healthcheck.HealthCheckPredictionResponse
	6,  // 15: taomics.praman.healthcheck.HealthCheckService.UploadHealthCheckResult:output_type -> taomics.praman.healthcheck.UploadHealthCheckResultResponse
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_healthcheck_healthcheck_proto_init() }
func file_healthcheck_healthcheck_proto_init() {
	if File_healthcheck_healthcheck_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_healthcheck_healthcheck_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_healthcheck_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckUploadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_healthcheck_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_healthcheck_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_healthcheck_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UploadHealthCheckResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_healthcheck_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UploadHealthCheckResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_healthcheck_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckParameter_Recommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_healthcheck_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckParameter_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_healthcheck_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckUploadData_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_healthcheck_healthcheck_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_healthcheck_healthcheck_proto_goTypes,
		DependencyIndexes: file_healthcheck_healthcheck_proto_depIdxs,
		EnumInfos:         file_healthcheck_healthcheck_proto_enumTypes,
		MessageInfos:      file_healthcheck_healthcheck_proto_msgTypes,
	}.Build()
	File_healthcheck_healthcheck_proto = out.File
	file_healthcheck_healthcheck_proto_rawDesc = nil
	file_healthcheck_healthcheck_proto_goTypes = nil
	file_healthcheck_healthcheck_proto_depIdxs = nil
}
