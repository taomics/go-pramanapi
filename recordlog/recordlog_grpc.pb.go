// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: recordlog/recordlog.proto

package recordlog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordLogService_GetBodyMetricsLog_FullMethodName     = "/taomics.praman.recordlog.RecordLogService/GetBodyMetricsLog"
	RecordLogService_GetSleepLog_FullMethodName           = "/taomics.praman.recordlog.RecordLogService/GetSleepLog"
	RecordLogService_GetMealLog_FullMethodName            = "/taomics.praman.recordlog.RecordLogService/GetMealLog"
	RecordLogService_GetAlcoholCaffeineLog_FullMethodName = "/taomics.praman.recordlog.RecordLogService/GetAlcoholCaffeineLog"
	RecordLogService_GetTabaccoLog_FullMethodName         = "/taomics.praman.recordlog.RecordLogService/GetTabaccoLog"
	RecordLogService_GetActivityLog_FullMethodName        = "/taomics.praman.recordlog.RecordLogService/GetActivityLog"
	RecordLogService_GetStressLog_FullMethodName          = "/taomics.praman.recordlog.RecordLogService/GetStressLog"
	RecordLogService_GetStoolLog_FullMethodName           = "/taomics.praman.recordlog.RecordLogService/GetStoolLog"
)

// RecordLogServiceClient is the client API for RecordLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # RecordLogService
//
// Common Errors:
//   - INTERNAL (13): Server is something wrong.
//   - UNAUTHENTICATED (16): Authorization header is something wrong.
//   - NOT_FOUND (5): There is no log for the current user.
//   - PERMISSION_DENIED (7): The requester does not have a user permission.
type RecordLogServiceClient interface {
	// Gets the current user's log of body metrics.
	GetBodyMetricsLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*BodyMetricsLog, error)
	// Gets the current user's log of sleep journal.
	GetSleepLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*SleepLog, error)
	// Gets the current user's log of meal journal.
	GetMealLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*MealLog, error)
	// Gets the current user's log of alcohol and caffeine journal.
	GetAlcoholCaffeineLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*AlcoholCaffeineLog, error)
	// Gets the current user's log of tabacco journal.
	GetTabaccoLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*TabaccoLog, error)
	// Gets the current user's log of activity journal.
	GetActivityLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*ActivityLog, error)
	// Gets the current user's log of stress journal.
	GetStressLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StressLog, error)
	// Gets the current user's log of stool journal.
	GetStoolLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StoolLog, error)
}

type recordLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordLogServiceClient(cc grpc.ClientConnInterface) RecordLogServiceClient {
	return &recordLogServiceClient{cc}
}

func (c *recordLogServiceClient) GetBodyMetricsLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*BodyMetricsLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BodyMetricsLog)
	err := c.cc.Invoke(ctx, RecordLogService_GetBodyMetricsLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordLogServiceClient) GetSleepLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*SleepLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SleepLog)
	err := c.cc.Invoke(ctx, RecordLogService_GetSleepLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordLogServiceClient) GetMealLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*MealLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MealLog)
	err := c.cc.Invoke(ctx, RecordLogService_GetMealLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordLogServiceClient) GetAlcoholCaffeineLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*AlcoholCaffeineLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlcoholCaffeineLog)
	err := c.cc.Invoke(ctx, RecordLogService_GetAlcoholCaffeineLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordLogServiceClient) GetTabaccoLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*TabaccoLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TabaccoLog)
	err := c.cc.Invoke(ctx, RecordLogService_GetTabaccoLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordLogServiceClient) GetActivityLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*ActivityLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityLog)
	err := c.cc.Invoke(ctx, RecordLogService_GetActivityLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordLogServiceClient) GetStressLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StressLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StressLog)
	err := c.cc.Invoke(ctx, RecordLogService_GetStressLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordLogServiceClient) GetStoolLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StoolLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoolLog)
	err := c.cc.Invoke(ctx, RecordLogService_GetStoolLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordLogServiceServer is the server API for RecordLogService service.
// All implementations must embed UnimplementedRecordLogServiceServer
// for forward compatibility.
//
// # RecordLogService
//
// Common Errors:
//   - INTERNAL (13): Server is something wrong.
//   - UNAUTHENTICATED (16): Authorization header is something wrong.
//   - NOT_FOUND (5): There is no log for the current user.
//   - PERMISSION_DENIED (7): The requester does not have a user permission.
type RecordLogServiceServer interface {
	// Gets the current user's log of body metrics.
	GetBodyMetricsLog(context.Context, *LogRequest) (*BodyMetricsLog, error)
	// Gets the current user's log of sleep journal.
	GetSleepLog(context.Context, *LogRequest) (*SleepLog, error)
	// Gets the current user's log of meal journal.
	GetMealLog(context.Context, *LogRequest) (*MealLog, error)
	// Gets the current user's log of alcohol and caffeine journal.
	GetAlcoholCaffeineLog(context.Context, *LogRequest) (*AlcoholCaffeineLog, error)
	// Gets the current user's log of tabacco journal.
	GetTabaccoLog(context.Context, *LogRequest) (*TabaccoLog, error)
	// Gets the current user's log of activity journal.
	GetActivityLog(context.Context, *LogRequest) (*ActivityLog, error)
	// Gets the current user's log of stress journal.
	GetStressLog(context.Context, *LogRequest) (*StressLog, error)
	// Gets the current user's log of stool journal.
	GetStoolLog(context.Context, *LogRequest) (*StoolLog, error)
	mustEmbedUnimplementedRecordLogServiceServer()
}

// UnimplementedRecordLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordLogServiceServer struct{}

func (UnimplementedRecordLogServiceServer) GetBodyMetricsLog(context.Context, *LogRequest) (*BodyMetricsLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBodyMetricsLog not implemented")
}
func (UnimplementedRecordLogServiceServer) GetSleepLog(context.Context, *LogRequest) (*SleepLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSleepLog not implemented")
}
func (UnimplementedRecordLogServiceServer) GetMealLog(context.Context, *LogRequest) (*MealLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealLog not implemented")
}
func (UnimplementedRecordLogServiceServer) GetAlcoholCaffeineLog(context.Context, *LogRequest) (*AlcoholCaffeineLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlcoholCaffeineLog not implemented")
}
func (UnimplementedRecordLogServiceServer) GetTabaccoLog(context.Context, *LogRequest) (*TabaccoLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTabaccoLog not implemented")
}
func (UnimplementedRecordLogServiceServer) GetActivityLog(context.Context, *LogRequest) (*ActivityLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityLog not implemented")
}
func (UnimplementedRecordLogServiceServer) GetStressLog(context.Context, *LogRequest) (*StressLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStressLog not implemented")
}
func (UnimplementedRecordLogServiceServer) GetStoolLog(context.Context, *LogRequest) (*StoolLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoolLog not implemented")
}
func (UnimplementedRecordLogServiceServer) mustEmbedUnimplementedRecordLogServiceServer() {}
func (UnimplementedRecordLogServiceServer) testEmbeddedByValue()                          {}

// UnsafeRecordLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordLogServiceServer will
// result in compilation errors.
type UnsafeRecordLogServiceServer interface {
	mustEmbedUnimplementedRecordLogServiceServer()
}

func RegisterRecordLogServiceServer(s grpc.ServiceRegistrar, srv RecordLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordLogService_ServiceDesc, srv)
}

func _RecordLogService_GetBodyMetricsLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordLogServiceServer).GetBodyMetricsLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordLogService_GetBodyMetricsLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordLogServiceServer).GetBodyMetricsLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordLogService_GetSleepLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordLogServiceServer).GetSleepLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordLogService_GetSleepLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordLogServiceServer).GetSleepLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordLogService_GetMealLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordLogServiceServer).GetMealLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordLogService_GetMealLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordLogServiceServer).GetMealLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordLogService_GetAlcoholCaffeineLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordLogServiceServer).GetAlcoholCaffeineLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordLogService_GetAlcoholCaffeineLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordLogServiceServer).GetAlcoholCaffeineLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordLogService_GetTabaccoLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordLogServiceServer).GetTabaccoLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordLogService_GetTabaccoLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordLogServiceServer).GetTabaccoLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordLogService_GetActivityLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordLogServiceServer).GetActivityLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordLogService_GetActivityLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordLogServiceServer).GetActivityLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordLogService_GetStressLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordLogServiceServer).GetStressLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordLogService_GetStressLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordLogServiceServer).GetStressLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordLogService_GetStoolLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordLogServiceServer).GetStoolLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordLogService_GetStoolLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordLogServiceServer).GetStoolLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordLogService_ServiceDesc is the grpc.ServiceDesc for RecordLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taomics.praman.recordlog.RecordLogService",
	HandlerType: (*RecordLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBodyMetricsLog",
			Handler:    _RecordLogService_GetBodyMetricsLog_Handler,
		},
		{
			MethodName: "GetSleepLog",
			Handler:    _RecordLogService_GetSleepLog_Handler,
		},
		{
			MethodName: "GetMealLog",
			Handler:    _RecordLogService_GetMealLog_Handler,
		},
		{
			MethodName: "GetAlcoholCaffeineLog",
			Handler:    _RecordLogService_GetAlcoholCaffeineLog_Handler,
		},
		{
			MethodName: "GetTabaccoLog",
			Handler:    _RecordLogService_GetTabaccoLog_Handler,
		},
		{
			MethodName: "GetActivityLog",
			Handler:    _RecordLogService_GetActivityLog_Handler,
		},
		{
			MethodName: "GetStressLog",
			Handler:    _RecordLogService_GetStressLog_Handler,
		},
		{
			MethodName: "GetStoolLog",
			Handler:    _RecordLogService_GetStoolLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordlog/recordlog.proto",
}
