// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: recordlog/recordlog.proto

package recordlog

import (
	pramanapi "github.com/taomics/pramanapi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timezone pramanapi.Timezone `protobuf:"varint,1,opt,name=timezone,proto3,enum=taomics.praman.Timezone" json:"timezone,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{0}
}

func (x *LogRequest) GetTimezone() pramanapi.Timezone {
	if x != nil {
		return x.Timezone
	}
	return pramanapi.Timezone(0)
}

// 特定の期間の統計情報を表します。
// 「朝食回数」などの件数を表すものは count と total のみ有効です。
// 「就寝時間」などの時間を表すものは total は無効です。
type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`      // データ数
	Minimum float32 `protobuf:"fixed32,2,opt,name=minimum,proto3" json:"minimum,omitempty"` // 最小値
	Maximum float32 `protobuf:"fixed32,3,opt,name=maximum,proto3" json:"maximum,omitempty"` // 最大値
	Median  float32 `protobuf:"fixed32,4,opt,name=median,proto3" json:"median,omitempty"`   // 中央値
	Total   float32 `protobuf:"fixed32,5,opt,name=total,proto3" json:"total,omitempty"`     // 合計値
	Average float32 `protobuf:"fixed32,6,opt,name=average,proto3" json:"average,omitempty"` // 平均値
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{1}
}

func (x *Statistics) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Statistics) GetMinimum() float32 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *Statistics) GetMaximum() float32 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *Statistics) GetMedian() float32 {
	if x != nil {
		return x.Median
	}
	return 0
}

func (x *Statistics) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Statistics) GetAverage() float32 {
	if x != nil {
		return x.Average
	}
	return 0
}

type BodyMetricsLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekly            []*BodyMetricsLog_Log             `protobuf:"bytes,1,rep,name=weekly,proto3" json:"weekly,omitempty"`                                                // 1週間分のログ
	MonthlyStatistics *BodyMetricsLog_StatisticsSummary `protobuf:"bytes,2,opt,name=monthly_statistics,json=monthlyStatistics,proto3" json:"monthly_statistics,omitempty"` // 月間統計
}

func (x *BodyMetricsLog) Reset() {
	*x = BodyMetricsLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyMetricsLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyMetricsLog) ProtoMessage() {}

func (x *BodyMetricsLog) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyMetricsLog.ProtoReflect.Descriptor instead.
func (*BodyMetricsLog) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{2}
}

func (x *BodyMetricsLog) GetWeekly() []*BodyMetricsLog_Log {
	if x != nil {
		return x.Weekly
	}
	return nil
}

func (x *BodyMetricsLog) GetMonthlyStatistics() *BodyMetricsLog_StatisticsSummary {
	if x != nil {
		return x.MonthlyStatistics
	}
	return nil
}

type SleepLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekly            []*SleepLog_Log             `protobuf:"bytes,1,rep,name=weekly,proto3" json:"weekly,omitempty"`                                                // 1週間分のログ
	MonthlyStatistics *SleepLog_StatisticsSummary `protobuf:"bytes,2,opt,name=monthly_statistics,json=monthlyStatistics,proto3" json:"monthly_statistics,omitempty"` // 月間統計
}

func (x *SleepLog) Reset() {
	*x = SleepLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepLog) ProtoMessage() {}

func (x *SleepLog) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepLog.ProtoReflect.Descriptor instead.
func (*SleepLog) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{3}
}

func (x *SleepLog) GetWeekly() []*SleepLog_Log {
	if x != nil {
		return x.Weekly
	}
	return nil
}

func (x *SleepLog) GetMonthlyStatistics() *SleepLog_StatisticsSummary {
	if x != nil {
		return x.MonthlyStatistics
	}
	return nil
}

type MealLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekly            []*MealLog_Log             `protobuf:"bytes,1,rep,name=weekly,proto3" json:"weekly,omitempty"`                                                // 1週間分のログ
	MonthlyStatistics *MealLog_StatisticsSummary `protobuf:"bytes,2,opt,name=monthly_statistics,json=monthlyStatistics,proto3" json:"monthly_statistics,omitempty"` // 月間統計
}

func (x *MealLog) Reset() {
	*x = MealLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MealLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealLog) ProtoMessage() {}

func (x *MealLog) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealLog.ProtoReflect.Descriptor instead.
func (*MealLog) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{4}
}

func (x *MealLog) GetWeekly() []*MealLog_Log {
	if x != nil {
		return x.Weekly
	}
	return nil
}

func (x *MealLog) GetMonthlyStatistics() *MealLog_StatisticsSummary {
	if x != nil {
		return x.MonthlyStatistics
	}
	return nil
}

type AlcoholCaffeineLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekly            []*AlcoholCaffeineLog_Log             `protobuf:"bytes,1,rep,name=weekly,proto3" json:"weekly,omitempty"`                                                // 1週間分のログ
	MonthlyStatistics *AlcoholCaffeineLog_StatisticsSummary `protobuf:"bytes,2,opt,name=monthly_statistics,json=monthlyStatistics,proto3" json:"monthly_statistics,omitempty"` // 月間統計
}

func (x *AlcoholCaffeineLog) Reset() {
	*x = AlcoholCaffeineLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlcoholCaffeineLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlcoholCaffeineLog) ProtoMessage() {}

func (x *AlcoholCaffeineLog) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlcoholCaffeineLog.ProtoReflect.Descriptor instead.
func (*AlcoholCaffeineLog) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{5}
}

func (x *AlcoholCaffeineLog) GetWeekly() []*AlcoholCaffeineLog_Log {
	if x != nil {
		return x.Weekly
	}
	return nil
}

func (x *AlcoholCaffeineLog) GetMonthlyStatistics() *AlcoholCaffeineLog_StatisticsSummary {
	if x != nil {
		return x.MonthlyStatistics
	}
	return nil
}

type TabaccoLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekly               []*TabaccoLog_Log             `protobuf:"bytes,1,rep,name=weekly,proto3" json:"weekly,omitempty"`                                                           // 1週間分のログ
	MonthlyStatistics    *TabaccoLog_StatisticsSummary `protobuf:"bytes,2,opt,name=monthly_statistics,json=monthlyStatistics,proto3" json:"monthly_statistics,omitempty"`            // 月間統計
	TwoMonthStatistics   *TabaccoLog_StatisticsSummary `protobuf:"bytes,3,opt,name=two_month_statistics,json=twoMonthStatistics,proto3" json:"two_month_statistics,omitempty"`       // 2ヶ月間統計
	ThreeMonthStatistics *TabaccoLog_StatisticsSummary `protobuf:"bytes,4,opt,name=three_month_statistics,json=threeMonthStatistics,proto3" json:"three_month_statistics,omitempty"` // 3ヶ月間統計
}

func (x *TabaccoLog) Reset() {
	*x = TabaccoLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabaccoLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabaccoLog) ProtoMessage() {}

func (x *TabaccoLog) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabaccoLog.ProtoReflect.Descriptor instead.
func (*TabaccoLog) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{6}
}

func (x *TabaccoLog) GetWeekly() []*TabaccoLog_Log {
	if x != nil {
		return x.Weekly
	}
	return nil
}

func (x *TabaccoLog) GetMonthlyStatistics() *TabaccoLog_StatisticsSummary {
	if x != nil {
		return x.MonthlyStatistics
	}
	return nil
}

func (x *TabaccoLog) GetTwoMonthStatistics() *TabaccoLog_StatisticsSummary {
	if x != nil {
		return x.TwoMonthStatistics
	}
	return nil
}

func (x *TabaccoLog) GetThreeMonthStatistics() *TabaccoLog_StatisticsSummary {
	if x != nil {
		return x.ThreeMonthStatistics
	}
	return nil
}

type ActivityLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekly            []*ActivityLog_Log             `protobuf:"bytes,1,rep,name=weekly,proto3" json:"weekly,omitempty"`                                                // 1週間分のログ
	MonthlyStatistics *ActivityLog_StatisticsSummary `protobuf:"bytes,2,opt,name=monthly_statistics,json=monthlyStatistics,proto3" json:"monthly_statistics,omitempty"` // 月間統計
}

func (x *ActivityLog) Reset() {
	*x = ActivityLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLog) ProtoMessage() {}

func (x *ActivityLog) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLog.ProtoReflect.Descriptor instead.
func (*ActivityLog) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{7}
}

func (x *ActivityLog) GetWeekly() []*ActivityLog_Log {
	if x != nil {
		return x.Weekly
	}
	return nil
}

func (x *ActivityLog) GetMonthlyStatistics() *ActivityLog_StatisticsSummary {
	if x != nil {
		return x.MonthlyStatistics
	}
	return nil
}

type StressLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekly            []*StressLog_Log             `protobuf:"bytes,1,rep,name=weekly,proto3" json:"weekly,omitempty"`                                                // 1週間分のログ
	MonthlyStatistics *StressLog_StatisticsSummary `protobuf:"bytes,2,opt,name=monthly_statistics,json=monthlyStatistics,proto3" json:"monthly_statistics,omitempty"` // 月間統計
}

func (x *StressLog) Reset() {
	*x = StressLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StressLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StressLog) ProtoMessage() {}

func (x *StressLog) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StressLog.ProtoReflect.Descriptor instead.
func (*StressLog) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{8}
}

func (x *StressLog) GetWeekly() []*StressLog_Log {
	if x != nil {
		return x.Weekly
	}
	return nil
}

func (x *StressLog) GetMonthlyStatistics() *StressLog_StatisticsSummary {
	if x != nil {
		return x.MonthlyStatistics
	}
	return nil
}

type StoolLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekly            []*StoolLog_Log             `protobuf:"bytes,1,rep,name=weekly,proto3" json:"weekly,omitempty"`                                                // 1週間分のログ
	MonthlyStatistics *StoolLog_StatisticsSummary `protobuf:"bytes,2,opt,name=monthly_statistics,json=monthlyStatistics,proto3" json:"monthly_statistics,omitempty"` // 月間統計
}

func (x *StoolLog) Reset() {
	*x = StoolLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoolLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoolLog) ProtoMessage() {}

func (x *StoolLog) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoolLog.ProtoReflect.Descriptor instead.
func (*StoolLog) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{9}
}

func (x *StoolLog) GetWeekly() []*StoolLog_Log {
	if x != nil {
		return x.Weekly
	}
	return nil
}

func (x *StoolLog) GetMonthlyStatistics() *StoolLog_StatisticsSummary {
	if x != nil {
		return x.MonthlyStatistics
	}
	return nil
}

type BodyMetricsLog_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date    *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Weight  float32         `protobuf:"fixed32,2,opt,name=weight,proto3" json:"weight,omitempty"`                  // 体重 (kg)
	BodyFat float32         `protobuf:"fixed32,3,opt,name=body_fat,json=bodyFat,proto3" json:"body_fat,omitempty"` // 体脂肪率 (%)
}

func (x *BodyMetricsLog_Log) Reset() {
	*x = BodyMetricsLog_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyMetricsLog_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyMetricsLog_Log) ProtoMessage() {}

func (x *BodyMetricsLog_Log) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyMetricsLog_Log.ProtoReflect.Descriptor instead.
func (*BodyMetricsLog_Log) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BodyMetricsLog_Log) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *BodyMetricsLog_Log) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BodyMetricsLog_Log) GetBodyFat() float32 {
	if x != nil {
		return x.BodyFat
	}
	return 0
}

type BodyMetricsLog_StatisticsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since   *pramanapi.Date `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until   *pramanapi.Date `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	Weight  *Statistics     `protobuf:"bytes,3,opt,name=weight,proto3" json:"weight,omitempty"`                  // 体重統計
	BodyFat *Statistics     `protobuf:"bytes,4,opt,name=body_fat,json=bodyFat,proto3" json:"body_fat,omitempty"` // 体脂肪率統計
}

func (x *BodyMetricsLog_StatisticsSummary) Reset() {
	*x = BodyMetricsLog_StatisticsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyMetricsLog_StatisticsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyMetricsLog_StatisticsSummary) ProtoMessage() {}

func (x *BodyMetricsLog_StatisticsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyMetricsLog_StatisticsSummary.ProtoReflect.Descriptor instead.
func (*BodyMetricsLog_StatisticsSummary) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{2, 1}
}

func (x *BodyMetricsLog_StatisticsSummary) GetSince() *pramanapi.Date {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *BodyMetricsLog_StatisticsSummary) GetUntil() *pramanapi.Date {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *BodyMetricsLog_StatisticsSummary) GetWeight() *Statistics {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *BodyMetricsLog_StatisticsSummary) GetBodyFat() *Statistics {
	if x != nil {
		return x.BodyFat
	}
	return nil
}

type SleepLog_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                 *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	BedTime              int64           `protobuf:"varint,2,opt,name=bed_time,json=bedTime,proto3" json:"bed_time,omitempty"`                                          // 就寝時間
	WakeTime             int64           `protobuf:"varint,3,opt,name=wake_time,json=wakeTime,proto3" json:"wake_time,omitempty"`                                       // 起床時間
	FrequentAwakenings   int32           `protobuf:"varint,4,opt,name=frequent_awakenings,json=frequentAwakenings,proto3" json:"frequent_awakenings,omitempty"`         // 中途覚醒 (回数)
	FallAsleepDifficulty int32           `protobuf:"varint,5,opt,name=fall_asleep_difficulty,json=fallAsleepDifficulty,proto3" json:"fall_asleep_difficulty,omitempty"` // 入眠するまでにかかった時間 (分)
	SleepQuality         int32           `protobuf:"varint,6,opt,name=sleep_quality,json=sleepQuality,proto3" json:"sleep_quality,omitempty"`                           // 睡眠休養感 (1-5)
	DaytimeSleepiness    int32           `protobuf:"varint,7,opt,name=daytime_sleepiness,json=daytimeSleepiness,proto3" json:"daytime_sleepiness,omitempty"`            // 日中の眠気 (1-5). ただし 0 はデータなし
}

func (x *SleepLog_Log) Reset() {
	*x = SleepLog_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepLog_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepLog_Log) ProtoMessage() {}

func (x *SleepLog_Log) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepLog_Log.ProtoReflect.Descriptor instead.
func (*SleepLog_Log) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SleepLog_Log) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *SleepLog_Log) GetBedTime() int64 {
	if x != nil {
		return x.BedTime
	}
	return 0
}

func (x *SleepLog_Log) GetWakeTime() int64 {
	if x != nil {
		return x.WakeTime
	}
	return 0
}

func (x *SleepLog_Log) GetFrequentAwakenings() int32 {
	if x != nil {
		return x.FrequentAwakenings
	}
	return 0
}

func (x *SleepLog_Log) GetFallAsleepDifficulty() int32 {
	if x != nil {
		return x.FallAsleepDifficulty
	}
	return 0
}

func (x *SleepLog_Log) GetSleepQuality() int32 {
	if x != nil {
		return x.SleepQuality
	}
	return 0
}

func (x *SleepLog_Log) GetDaytimeSleepiness() int32 {
	if x != nil {
		return x.DaytimeSleepiness
	}
	return 0
}

type SleepLog_StatisticsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since                       *pramanapi.Date `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until                       *pramanapi.Date `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	SleepDurationMinutes        *Statistics     `protobuf:"bytes,3,opt,name=sleep_duration_minutes,json=sleepDurationMinutes,proto3" json:"sleep_duration_minutes,omitempty"`                        // 睡眠時間統計
	BedTimeMinutes              *Statistics     `protobuf:"bytes,4,opt,name=bed_time_minutes,json=bedTimeMinutes,proto3" json:"bed_time_minutes,omitempty"`                                          // 就寝時間統計
	WakeTimeMinutes             *Statistics     `protobuf:"bytes,5,opt,name=wake_time_minutes,json=wakeTimeMinutes,proto3" json:"wake_time_minutes,omitempty"`                                       // 起床時間統計
	FrequentAwakenings          *Statistics     `protobuf:"bytes,6,opt,name=frequent_awakenings,json=frequentAwakenings,proto3" json:"frequent_awakenings,omitempty"`                                // 中途覚醒統計
	FallAsleepDifficultyMinutes *Statistics     `protobuf:"bytes,7,opt,name=fall_asleep_difficulty_minutes,json=fallAsleepDifficultyMinutes,proto3" json:"fall_asleep_difficulty_minutes,omitempty"` // 入眠するまでにかかった時間統計
	SleepQuality                *Statistics     `protobuf:"bytes,8,opt,name=sleep_quality,json=sleepQuality,proto3" json:"sleep_quality,omitempty"`                                                  // 睡眠休養感統計
	DaytimeSleepiness           *Statistics     `protobuf:"bytes,9,opt,name=daytime_sleepiness,json=daytimeSleepiness,proto3" json:"daytime_sleepiness,omitempty"`                                   // 日中の眠気統計
}

func (x *SleepLog_StatisticsSummary) Reset() {
	*x = SleepLog_StatisticsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepLog_StatisticsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepLog_StatisticsSummary) ProtoMessage() {}

func (x *SleepLog_StatisticsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepLog_StatisticsSummary.ProtoReflect.Descriptor instead.
func (*SleepLog_StatisticsSummary) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{3, 1}
}

func (x *SleepLog_StatisticsSummary) GetSince() *pramanapi.Date {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *SleepLog_StatisticsSummary) GetUntil() *pramanapi.Date {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *SleepLog_StatisticsSummary) GetSleepDurationMinutes() *Statistics {
	if x != nil {
		return x.SleepDurationMinutes
	}
	return nil
}

func (x *SleepLog_StatisticsSummary) GetBedTimeMinutes() *Statistics {
	if x != nil {
		return x.BedTimeMinutes
	}
	return nil
}

func (x *SleepLog_StatisticsSummary) GetWakeTimeMinutes() *Statistics {
	if x != nil {
		return x.WakeTimeMinutes
	}
	return nil
}

func (x *SleepLog_StatisticsSummary) GetFrequentAwakenings() *Statistics {
	if x != nil {
		return x.FrequentAwakenings
	}
	return nil
}

func (x *SleepLog_StatisticsSummary) GetFallAsleepDifficultyMinutes() *Statistics {
	if x != nil {
		return x.FallAsleepDifficultyMinutes
	}
	return nil
}

func (x *SleepLog_StatisticsSummary) GetSleepQuality() *Statistics {
	if x != nil {
		return x.SleepQuality
	}
	return nil
}

func (x *SleepLog_StatisticsSummary) GetDaytimeSleepiness() *Statistics {
	if x != nil {
		return x.DaytimeSleepiness
	}
	return nil
}

type MealLog_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date           *pramanapi.Date         `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	IntakeKcal     float32                 `protobuf:"fixed32,2,opt,name=intake_kcal,json=intakeKcal,proto3" json:"intake_kcal,omitempty"`              // 推定摂取カロリー (kcal)
	PfcBalance     *MealLog_Log_PFCBalance `protobuf:"bytes,3,opt,name=pfc_balance,json=pfcBalance,proto3" json:"pfc_balance,omitempty"`                // PFCバランス
	Breakfast      *MealLog_Log_Meal       `protobuf:"bytes,4,opt,name=breakfast,proto3" json:"breakfast,omitempty"`                                    // 朝食
	Lunch          *MealLog_Log_Meal       `protobuf:"bytes,5,opt,name=lunch,proto3" json:"lunch,omitempty"`                                            // 昼食
	Dinner         *MealLog_Log_Meal       `protobuf:"bytes,6,opt,name=dinner,proto3" json:"dinner,omitempty"`                                          // 夕食
	Snacks         *MealLog_Log_Meal       `protobuf:"bytes,7,opt,name=snacks,proto3" json:"snacks,omitempty"`                                          // 間食
	ExtraEnergy    int32                   `protobuf:"varint,8,opt,name=extra_energy,json=extraEnergy,proto3" json:"extra_energy,omitempty"`            // 菓子類カロリーの合計 (kcal)
	LastEatingTime int64                   `protobuf:"varint,9,opt,name=last_eating_time,json=lastEatingTime,proto3" json:"last_eating_time,omitempty"` // 最終食事摂取時間
}

func (x *MealLog_Log) Reset() {
	*x = MealLog_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MealLog_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealLog_Log) ProtoMessage() {}

func (x *MealLog_Log) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealLog_Log.ProtoReflect.Descriptor instead.
func (*MealLog_Log) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{4, 0}
}

func (x *MealLog_Log) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *MealLog_Log) GetIntakeKcal() float32 {
	if x != nil {
		return x.IntakeKcal
	}
	return 0
}

func (x *MealLog_Log) GetPfcBalance() *MealLog_Log_PFCBalance {
	if x != nil {
		return x.PfcBalance
	}
	return nil
}

func (x *MealLog_Log) GetBreakfast() *MealLog_Log_Meal {
	if x != nil {
		return x.Breakfast
	}
	return nil
}

func (x *MealLog_Log) GetLunch() *MealLog_Log_Meal {
	if x != nil {
		return x.Lunch
	}
	return nil
}

func (x *MealLog_Log) GetDinner() *MealLog_Log_Meal {
	if x != nil {
		return x.Dinner
	}
	return nil
}

func (x *MealLog_Log) GetSnacks() *MealLog_Log_Meal {
	if x != nil {
		return x.Snacks
	}
	return nil
}

func (x *MealLog_Log) GetExtraEnergy() int32 {
	if x != nil {
		return x.ExtraEnergy
	}
	return 0
}

func (x *MealLog_Log) GetLastEatingTime() int64 {
	if x != nil {
		return x.LastEatingTime
	}
	return 0
}

type MealLog_StatisticsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since                 *pramanapi.Date                       `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until                 *pramanapi.Date                       `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	IntakeKcal            *Statistics                           `protobuf:"bytes,3,opt,name=intake_kcal,json=intakeKcal,proto3" json:"intake_kcal,omitempty"`                                      // 推定消費カロリー統計
	PfcBalance            *MealLog_StatisticsSummary_PFCBalance `protobuf:"bytes,4,opt,name=pfc_balance,json=pfcBalance,proto3" json:"pfc_balance,omitempty"`                                      // PFCバランス統計
	ExtraEnergy           *Statistics                           `protobuf:"bytes,5,opt,name=extra_energy,json=extraEnergy,proto3" json:"extra_energy,omitempty"`                                   // 菓子類カロリーの合計統計
	LastEatingTimeMinutes *Statistics                           `protobuf:"bytes,6,opt,name=last_eating_time_minutes,json=lastEatingTimeMinutes,proto3" json:"last_eating_time_minutes,omitempty"` // 最終食事摂取時間統計
	StarchSv              *Statistics                           `protobuf:"bytes,7,opt,name=starch_sv,json=starchSv,proto3" json:"starch_sv,omitempty"`                                            // 主食の合計統計
	SideSv                *Statistics                           `protobuf:"bytes,8,opt,name=side_sv,json=sideSv,proto3" json:"side_sv,omitempty"`                                                  // 副菜の合計統計
	MainSv                *Statistics                           `protobuf:"bytes,9,opt,name=main_sv,json=mainSv,proto3" json:"main_sv,omitempty"`                                                  // 主菜の合計統計
	DairySv               *Statistics                           `protobuf:"bytes,10,opt,name=dairy_sv,json=dairySv,proto3" json:"dairy_sv,omitempty"`                                              // 乳製品の合計統計
	FruitSv               *Statistics                           `protobuf:"bytes,11,opt,name=fruit_sv,json=fruitSv,proto3" json:"fruit_sv,omitempty"`                                              // 果物の合計統計
	BreakfastCount        *Statistics                           `protobuf:"bytes,12,opt,name=breakfast_count,json=breakfastCount,proto3" json:"breakfast_count,omitempty"`                         // 朝食回数統計
	LunchCount            *Statistics                           `protobuf:"bytes,13,opt,name=lunch_count,json=lunchCount,proto3" json:"lunch_count,omitempty"`                                     // 昼食回数統計
	DinnerCount           *Statistics                           `protobuf:"bytes,14,opt,name=dinner_count,json=dinnerCount,proto3" json:"dinner_count,omitempty"`                                  // 夕食回数統計
	NoStarchCount         *Statistics                           `protobuf:"bytes,15,opt,name=no_starch_count,json=noStarchCount,proto3" json:"no_starch_count,omitempty"`                          // 主食欠食回数統計
	NoMainCount           *Statistics                           `protobuf:"bytes,16,opt,name=no_main_count,json=noMainCount,proto3" json:"no_main_count,omitempty"`                                // 主菜欠食回数統計
	NoSideCount           *Statistics                           `protobuf:"bytes,17,opt,name=no_side_count,json=noSideCount,proto3" json:"no_side_count,omitempty"`                                // 副菜欠食回数統計
}

func (x *MealLog_StatisticsSummary) Reset() {
	*x = MealLog_StatisticsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MealLog_StatisticsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealLog_StatisticsSummary) ProtoMessage() {}

func (x *MealLog_StatisticsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealLog_StatisticsSummary.ProtoReflect.Descriptor instead.
func (*MealLog_StatisticsSummary) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{4, 1}
}

func (x *MealLog_StatisticsSummary) GetSince() *pramanapi.Date {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetUntil() *pramanapi.Date {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetIntakeKcal() *Statistics {
	if x != nil {
		return x.IntakeKcal
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetPfcBalance() *MealLog_StatisticsSummary_PFCBalance {
	if x != nil {
		return x.PfcBalance
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetExtraEnergy() *Statistics {
	if x != nil {
		return x.ExtraEnergy
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetLastEatingTimeMinutes() *Statistics {
	if x != nil {
		return x.LastEatingTimeMinutes
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetStarchSv() *Statistics {
	if x != nil {
		return x.StarchSv
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetSideSv() *Statistics {
	if x != nil {
		return x.SideSv
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetMainSv() *Statistics {
	if x != nil {
		return x.MainSv
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetDairySv() *Statistics {
	if x != nil {
		return x.DairySv
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetFruitSv() *Statistics {
	if x != nil {
		return x.FruitSv
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetBreakfastCount() *Statistics {
	if x != nil {
		return x.BreakfastCount
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetLunchCount() *Statistics {
	if x != nil {
		return x.LunchCount
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetDinnerCount() *Statistics {
	if x != nil {
		return x.DinnerCount
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetNoStarchCount() *Statistics {
	if x != nil {
		return x.NoStarchCount
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetNoMainCount() *Statistics {
	if x != nil {
		return x.NoMainCount
	}
	return nil
}

func (x *MealLog_StatisticsSummary) GetNoSideCount() *Statistics {
	if x != nil {
		return x.NoSideCount
	}
	return nil
}

type MealLog_Log_PFCBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protein      float32 `protobuf:"fixed32,1,opt,name=protein,proto3" json:"protein,omitempty"`           // プロテインパーセント (%)
	Fat          float32 `protobuf:"fixed32,2,opt,name=fat,proto3" json:"fat,omitempty"`                   // 脂質パーセント (%)
	Carbohydrate float32 `protobuf:"fixed32,3,opt,name=carbohydrate,proto3" json:"carbohydrate,omitempty"` // 炭水化物パーセント (%)
}

func (x *MealLog_Log_PFCBalance) Reset() {
	*x = MealLog_Log_PFCBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MealLog_Log_PFCBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealLog_Log_PFCBalance) ProtoMessage() {}

func (x *MealLog_Log_PFCBalance) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealLog_Log_PFCBalance.ProtoReflect.Descriptor instead.
func (*MealLog_Log_PFCBalance) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *MealLog_Log_PFCBalance) GetProtein() float32 {
	if x != nil {
		return x.Protein
	}
	return 0
}

func (x *MealLog_Log_PFCBalance) GetFat() float32 {
	if x != nil {
		return x.Fat
	}
	return 0
}

func (x *MealLog_Log_PFCBalance) GetCarbohydrate() float32 {
	if x != nil {
		return x.Carbohydrate
	}
	return 0
}

type MealLog_Log_Meal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starch float32 `protobuf:"fixed32,1,opt,name=starch,proto3" json:"starch,omitempty"`
	Side   float32 `protobuf:"fixed32,2,opt,name=side,proto3" json:"side,omitempty"`
	Main   float32 `protobuf:"fixed32,3,opt,name=main,proto3" json:"main,omitempty"`
	Dairy  float32 `protobuf:"fixed32,4,opt,name=dairy,proto3" json:"dairy,omitempty"`
	Fruit  float32 `protobuf:"fixed32,5,opt,name=fruit,proto3" json:"fruit,omitempty"`
}

func (x *MealLog_Log_Meal) Reset() {
	*x = MealLog_Log_Meal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MealLog_Log_Meal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealLog_Log_Meal) ProtoMessage() {}

func (x *MealLog_Log_Meal) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealLog_Log_Meal.ProtoReflect.Descriptor instead.
func (*MealLog_Log_Meal) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *MealLog_Log_Meal) GetStarch() float32 {
	if x != nil {
		return x.Starch
	}
	return 0
}

func (x *MealLog_Log_Meal) GetSide() float32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *MealLog_Log_Meal) GetMain() float32 {
	if x != nil {
		return x.Main
	}
	return 0
}

func (x *MealLog_Log_Meal) GetDairy() float32 {
	if x != nil {
		return x.Dairy
	}
	return 0
}

func (x *MealLog_Log_Meal) GetFruit() float32 {
	if x != nil {
		return x.Fruit
	}
	return 0
}

type MealLog_StatisticsSummary_PFCBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protein      *Statistics `protobuf:"bytes,1,opt,name=protein,proto3" json:"protein,omitempty"`           // プロテインパーセント (%)
	Fat          *Statistics `protobuf:"bytes,2,opt,name=fat,proto3" json:"fat,omitempty"`                   // 脂質パーセント (%)
	Carbohydrate *Statistics `protobuf:"bytes,3,opt,name=carbohydrate,proto3" json:"carbohydrate,omitempty"` // 炭水化物パーセント (%)
}

func (x *MealLog_StatisticsSummary_PFCBalance) Reset() {
	*x = MealLog_StatisticsSummary_PFCBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MealLog_StatisticsSummary_PFCBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealLog_StatisticsSummary_PFCBalance) ProtoMessage() {}

func (x *MealLog_StatisticsSummary_PFCBalance) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealLog_StatisticsSummary_PFCBalance.ProtoReflect.Descriptor instead.
func (*MealLog_StatisticsSummary_PFCBalance) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *MealLog_StatisticsSummary_PFCBalance) GetProtein() *Statistics {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *MealLog_StatisticsSummary_PFCBalance) GetFat() *Statistics {
	if x != nil {
		return x.Fat
	}
	return nil
}

func (x *MealLog_StatisticsSummary_PFCBalance) GetCarbohydrate() *Statistics {
	if x != nil {
		return x.Carbohydrate
	}
	return nil
}

type AlcoholCaffeineLog_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date             *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	AlcoholQuantity  int32           `protobuf:"varint,2,opt,name=alcohol_quantity,json=alcoholQuantity,proto3" json:"alcohol_quantity,omitempty"`      // 飲酒の摂取量 (合) (1-4)
	CaffeineQuantity int32           `protobuf:"varint,3,opt,name=caffeine_quantity,json=caffeineQuantity,proto3" json:"caffeine_quantity,omitempty"`   // カフェインの摂取量 (杯)
	LastCaffeineTime int64           `protobuf:"varint,4,opt,name=last_caffeine_time,json=lastCaffeineTime,proto3" json:"last_caffeine_time,omitempty"` // 最終カフェイン摂取時間
	// カフェイン絶時間 (分)
	// 翌日の朝の問診が必要になるため値を返せない場合があります。
	CaffeineAbstinenceMinutes int32 `protobuf:"varint,6,opt,name=caffeine_abstinence_minutes,json=caffeineAbstinenceMinutes,proto3" json:"caffeine_abstinence_minutes,omitempty"`
}

func (x *AlcoholCaffeineLog_Log) Reset() {
	*x = AlcoholCaffeineLog_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlcoholCaffeineLog_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlcoholCaffeineLog_Log) ProtoMessage() {}

func (x *AlcoholCaffeineLog_Log) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlcoholCaffeineLog_Log.ProtoReflect.Descriptor instead.
func (*AlcoholCaffeineLog_Log) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{5, 0}
}

func (x *AlcoholCaffeineLog_Log) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *AlcoholCaffeineLog_Log) GetAlcoholQuantity() int32 {
	if x != nil {
		return x.AlcoholQuantity
	}
	return 0
}

func (x *AlcoholCaffeineLog_Log) GetCaffeineQuantity() int32 {
	if x != nil {
		return x.CaffeineQuantity
	}
	return 0
}

func (x *AlcoholCaffeineLog_Log) GetLastCaffeineTime() int64 {
	if x != nil {
		return x.LastCaffeineTime
	}
	return 0
}

func (x *AlcoholCaffeineLog_Log) GetCaffeineAbstinenceMinutes() int32 {
	if x != nil {
		return x.CaffeineAbstinenceMinutes
	}
	return 0
}

type AlcoholCaffeineLog_StatisticsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since                     *pramanapi.Date `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until                     *pramanapi.Date `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	AlcoholCount              *Statistics     `protobuf:"bytes,4,opt,name=alcohol_count,json=alcoholCount,proto3" json:"alcohol_count,omitempty"`                                          // 飲酒回数統計
	AlcoholQuantity           *Statistics     `protobuf:"bytes,5,opt,name=alcohol_quantity,json=alcoholQuantity,proto3" json:"alcohol_quantity,omitempty"`                                 // 飲酒の摂取量統計
	CaffeineCount             *Statistics     `protobuf:"bytes,6,opt,name=caffeine_count,json=caffeineCount,proto3" json:"caffeine_count,omitempty"`                                       // カフェイン摂取回数統計
	CaffeineQuantity          *Statistics     `protobuf:"bytes,7,opt,name=caffeine_quantity,json=caffeineQuantity,proto3" json:"caffeine_quantity,omitempty"`                              // カフェインの摂取量統計
	CaffeineAbstinenceMinutes *Statistics     `protobuf:"bytes,8,opt,name=caffeine_abstinence_minutes,json=caffeineAbstinenceMinutes,proto3" json:"caffeine_abstinence_minutes,omitempty"` // カフェイン絶時間統計
	LastCaffeineTimeMinutes   *Statistics     `protobuf:"bytes,9,opt,name=last_caffeine_time_minutes,json=lastCaffeineTimeMinutes,proto3" json:"last_caffeine_time_minutes,omitempty"`     // 最終カフェイン摂取時間統計
}

func (x *AlcoholCaffeineLog_StatisticsSummary) Reset() {
	*x = AlcoholCaffeineLog_StatisticsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlcoholCaffeineLog_StatisticsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlcoholCaffeineLog_StatisticsSummary) ProtoMessage() {}

func (x *AlcoholCaffeineLog_StatisticsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlcoholCaffeineLog_StatisticsSummary.ProtoReflect.Descriptor instead.
func (*AlcoholCaffeineLog_StatisticsSummary) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{5, 1}
}

func (x *AlcoholCaffeineLog_StatisticsSummary) GetSince() *pramanapi.Date {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *AlcoholCaffeineLog_StatisticsSummary) GetUntil() *pramanapi.Date {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *AlcoholCaffeineLog_StatisticsSummary) GetAlcoholCount() *Statistics {
	if x != nil {
		return x.AlcoholCount
	}
	return nil
}

func (x *AlcoholCaffeineLog_StatisticsSummary) GetAlcoholQuantity() *Statistics {
	if x != nil {
		return x.AlcoholQuantity
	}
	return nil
}

func (x *AlcoholCaffeineLog_StatisticsSummary) GetCaffeineCount() *Statistics {
	if x != nil {
		return x.CaffeineCount
	}
	return nil
}

func (x *AlcoholCaffeineLog_StatisticsSummary) GetCaffeineQuantity() *Statistics {
	if x != nil {
		return x.CaffeineQuantity
	}
	return nil
}

func (x *AlcoholCaffeineLog_StatisticsSummary) GetCaffeineAbstinenceMinutes() *Statistics {
	if x != nil {
		return x.CaffeineAbstinenceMinutes
	}
	return nil
}

func (x *AlcoholCaffeineLog_StatisticsSummary) GetLastCaffeineTimeMinutes() *Statistics {
	if x != nil {
		return x.LastCaffeineTimeMinutes
	}
	return nil
}

type TabaccoLog_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TabaccoQuantity int32           `protobuf:"varint,2,opt,name=tabacco_quantity,json=tabaccoQuantity,proto3" json:"tabacco_quantity,omitempty"` // 喫煙本数 (本)
	HadCigarette    bool            `protobuf:"varint,3,opt,name=had_cigarette,json=hadCigarette,proto3" json:"had_cigarette,omitempty"`          // 紙巻タバコ: あり=true, なし=false
	HadHeated       bool            `protobuf:"varint,4,opt,name=had_heated,json=hadHeated,proto3" json:"had_heated,omitempty"`                   // 加熱式タバコ: あり=true, なし=false
	HadElectronic   bool            `protobuf:"varint,5,opt,name=had_electronic,json=hadElectronic,proto3" json:"had_electronic,omitempty"`       // 電子式タバコ: あり=true, なし=false
}

func (x *TabaccoLog_Log) Reset() {
	*x = TabaccoLog_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabaccoLog_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabaccoLog_Log) ProtoMessage() {}

func (x *TabaccoLog_Log) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabaccoLog_Log.ProtoReflect.Descriptor instead.
func (*TabaccoLog_Log) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TabaccoLog_Log) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TabaccoLog_Log) GetTabaccoQuantity() int32 {
	if x != nil {
		return x.TabaccoQuantity
	}
	return 0
}

func (x *TabaccoLog_Log) GetHadCigarette() bool {
	if x != nil {
		return x.HadCigarette
	}
	return false
}

func (x *TabaccoLog_Log) GetHadHeated() bool {
	if x != nil {
		return x.HadHeated
	}
	return false
}

func (x *TabaccoLog_Log) GetHadElectronic() bool {
	if x != nil {
		return x.HadElectronic
	}
	return false
}

type TabaccoLog_StatisticsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since           *pramanapi.Date `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until           *pramanapi.Date `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	TabaccoQuantity *Statistics     `protobuf:"bytes,3,opt,name=tabacco_quantity,json=tabaccoQuantity,proto3" json:"tabacco_quantity,omitempty"` // 喫煙本数統計
	TabaccoCount    *Statistics     `protobuf:"bytes,4,opt,name=tabacco_count,json=tabaccoCount,proto3" json:"tabacco_count,omitempty"`          // 喫煙回数統計
	CigaretteCount  *Statistics     `protobuf:"bytes,5,opt,name=cigarette_count,json=cigaretteCount,proto3" json:"cigarette_count,omitempty"`    // 紙巻タバコ回数統計
	HeatedCount     *Statistics     `protobuf:"bytes,6,opt,name=heated_count,json=heatedCount,proto3" json:"heated_count,omitempty"`             // 加熱式タバコ回数統計
	ElectronicCount *Statistics     `protobuf:"bytes,7,opt,name=electronic_count,json=electronicCount,proto3" json:"electronic_count,omitempty"` // 電子式タバコ回数統計
}

func (x *TabaccoLog_StatisticsSummary) Reset() {
	*x = TabaccoLog_StatisticsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabaccoLog_StatisticsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabaccoLog_StatisticsSummary) ProtoMessage() {}

func (x *TabaccoLog_StatisticsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabaccoLog_StatisticsSummary.ProtoReflect.Descriptor instead.
func (*TabaccoLog_StatisticsSummary) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{6, 1}
}

func (x *TabaccoLog_StatisticsSummary) GetSince() *pramanapi.Date {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *TabaccoLog_StatisticsSummary) GetUntil() *pramanapi.Date {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *TabaccoLog_StatisticsSummary) GetTabaccoQuantity() *Statistics {
	if x != nil {
		return x.TabaccoQuantity
	}
	return nil
}

func (x *TabaccoLog_StatisticsSummary) GetTabaccoCount() *Statistics {
	if x != nil {
		return x.TabaccoCount
	}
	return nil
}

func (x *TabaccoLog_StatisticsSummary) GetCigaretteCount() *Statistics {
	if x != nil {
		return x.CigaretteCount
	}
	return nil
}

func (x *TabaccoLog_StatisticsSummary) GetHeatedCount() *Statistics {
	if x != nil {
		return x.HeatedCount
	}
	return nil
}

func (x *TabaccoLog_StatisticsSummary) GetElectronicCount() *Statistics {
	if x != nil {
		return x.ElectronicCount
	}
	return nil
}

type ActivityLog_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Steps               int32           `protobuf:"varint,2,opt,name=steps,proto3" json:"steps,omitempty"`                                                          // 歩数 (歩)
	ActivityMinutes     int32           `protobuf:"varint,3,opt,name=activity_minutes,json=activityMinutes,proto3" json:"activity_minutes,omitempty"`               // 有酸素運動時間 (分)
	SittingTimeMinutes  int32           `protobuf:"varint,4,opt,name=sitting_time_minutes,json=sittingTimeMinutes,proto3" json:"sitting_time_minutes,omitempty"`    // 座位時間 (分)
	HadStrengthTraining bool            `protobuf:"varint,5,opt,name=had_strength_training,json=hadStrengthTraining,proto3" json:"had_strength_training,omitempty"` // 筋トレ: あり=true, なし=false
	HadBodyWeight       bool            `protobuf:"varint,6,opt,name=had_body_weight,json=hadBodyWeight,proto3" json:"had_body_weight,omitempty"`                   // 自重トレーニング: あり=true, なし=false
	HadMachine          bool            `protobuf:"varint,7,opt,name=had_machine,json=hadMachine,proto3" json:"had_machine,omitempty"`                              // マシントレーニング: あり=true, なし=false
	HadResistance       bool            `protobuf:"varint,8,opt,name=had_resistance,json=hadResistance,proto3" json:"had_resistance,omitempty"`                     // ウェイトトレーニング: あり=true, なし=false
	HadHolistic         bool            `protobuf:"varint,9,opt,name=had_holistic,json=hadHolistic,proto3" json:"had_holistic,omitempty"`                           // ボディワーク: あり=true, なし=false
}

func (x *ActivityLog_Log) Reset() {
	*x = ActivityLog_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityLog_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLog_Log) ProtoMessage() {}

func (x *ActivityLog_Log) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLog_Log.ProtoReflect.Descriptor instead.
func (*ActivityLog_Log) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ActivityLog_Log) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ActivityLog_Log) GetSteps() int32 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *ActivityLog_Log) GetActivityMinutes() int32 {
	if x != nil {
		return x.ActivityMinutes
	}
	return 0
}

func (x *ActivityLog_Log) GetSittingTimeMinutes() int32 {
	if x != nil {
		return x.SittingTimeMinutes
	}
	return 0
}

func (x *ActivityLog_Log) GetHadStrengthTraining() bool {
	if x != nil {
		return x.HadStrengthTraining
	}
	return false
}

func (x *ActivityLog_Log) GetHadBodyWeight() bool {
	if x != nil {
		return x.HadBodyWeight
	}
	return false
}

func (x *ActivityLog_Log) GetHadMachine() bool {
	if x != nil {
		return x.HadMachine
	}
	return false
}

func (x *ActivityLog_Log) GetHadResistance() bool {
	if x != nil {
		return x.HadResistance
	}
	return false
}

func (x *ActivityLog_Log) GetHadHolistic() bool {
	if x != nil {
		return x.HadHolistic
	}
	return false
}

type ActivityLog_StatisticsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since                 *pramanapi.Date `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until                 *pramanapi.Date `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	Steps                 *Statistics     `protobuf:"bytes,3,opt,name=steps,proto3" json:"steps,omitempty"`                                                                // 歩数統計
	ActivityMinutes       *Statistics     `protobuf:"bytes,4,opt,name=activity_minutes,json=activityMinutes,proto3" json:"activity_minutes,omitempty"`                     // 有酸素運動時間統計
	SittingTimeMinutes    *Statistics     `protobuf:"bytes,5,opt,name=sitting_time_minutes,json=sittingTimeMinutes,proto3" json:"sitting_time_minutes,omitempty"`          // 座位時間統計
	StrengthTrainingCount *Statistics     `protobuf:"bytes,6,opt,name=strength_training_count,json=strengthTrainingCount,proto3" json:"strength_training_count,omitempty"` // 筋トレ回数統計
	BodyWeightCount       *Statistics     `protobuf:"bytes,7,opt,name=body_weight_count,json=bodyWeightCount,proto3" json:"body_weight_count,omitempty"`                   // 自重トレーニング回数統計
	MachineCount          *Statistics     `protobuf:"bytes,8,opt,name=machine_count,json=machineCount,proto3" json:"machine_count,omitempty"`                              // マシントレーニング回数統計
	ResistanceCount       *Statistics     `protobuf:"bytes,9,opt,name=resistance_count,json=resistanceCount,proto3" json:"resistance_count,omitempty"`                     // ウェイトトレーニング回数統計
	HolisticCount         *Statistics     `protobuf:"bytes,10,opt,name=holistic_count,json=holisticCount,proto3" json:"holistic_count,omitempty"`                          // ボディワーク回数統計
}

func (x *ActivityLog_StatisticsSummary) Reset() {
	*x = ActivityLog_StatisticsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityLog_StatisticsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLog_StatisticsSummary) ProtoMessage() {}

func (x *ActivityLog_StatisticsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLog_StatisticsSummary.ProtoReflect.Descriptor instead.
func (*ActivityLog_StatisticsSummary) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{7, 1}
}

func (x *ActivityLog_StatisticsSummary) GetSince() *pramanapi.Date {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *ActivityLog_StatisticsSummary) GetUntil() *pramanapi.Date {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *ActivityLog_StatisticsSummary) GetSteps() *Statistics {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ActivityLog_StatisticsSummary) GetActivityMinutes() *Statistics {
	if x != nil {
		return x.ActivityMinutes
	}
	return nil
}

func (x *ActivityLog_StatisticsSummary) GetSittingTimeMinutes() *Statistics {
	if x != nil {
		return x.SittingTimeMinutes
	}
	return nil
}

func (x *ActivityLog_StatisticsSummary) GetStrengthTrainingCount() *Statistics {
	if x != nil {
		return x.StrengthTrainingCount
	}
	return nil
}

func (x *ActivityLog_StatisticsSummary) GetBodyWeightCount() *Statistics {
	if x != nil {
		return x.BodyWeightCount
	}
	return nil
}

func (x *ActivityLog_StatisticsSummary) GetMachineCount() *Statistics {
	if x != nil {
		return x.MachineCount
	}
	return nil
}

func (x *ActivityLog_StatisticsSummary) GetResistanceCount() *Statistics {
	if x != nil {
		return x.ResistanceCount
	}
	return nil
}

func (x *ActivityLog_StatisticsSummary) GetHolisticCount() *Statistics {
	if x != nil {
		return x.HolisticCount
	}
	return nil
}

type StressLog_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	DaytimeMood     int32           `protobuf:"varint,2,opt,name=daytime_mood,json=daytimeMood,proto3" json:"daytime_mood,omitempty"`               // 日中の気分 (1-5)
	DaytimeEmotion  int32           `protobuf:"varint,3,opt,name=daytime_emotion,json=daytimeEmotion,proto3" json:"daytime_emotion,omitempty"`      // 日中のストレス (1-5)
	TalkTimeMinutes int32           `protobuf:"varint,4,opt,name=talk_time_minutes,json=talkTimeMinutes,proto3" json:"talk_time_minutes,omitempty"` // 会話時間 (分)
	HadStressCoping bool            `protobuf:"varint,5,opt,name=had_stress_coping,json=hadStressCoping,proto3" json:"had_stress_coping,omitempty"` // ストレスコーピング: あり=true, なし=false
}

func (x *StressLog_Log) Reset() {
	*x = StressLog_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StressLog_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StressLog_Log) ProtoMessage() {}

func (x *StressLog_Log) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StressLog_Log.ProtoReflect.Descriptor instead.
func (*StressLog_Log) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{8, 0}
}

func (x *StressLog_Log) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *StressLog_Log) GetDaytimeMood() int32 {
	if x != nil {
		return x.DaytimeMood
	}
	return 0
}

func (x *StressLog_Log) GetDaytimeEmotion() int32 {
	if x != nil {
		return x.DaytimeEmotion
	}
	return 0
}

func (x *StressLog_Log) GetTalkTimeMinutes() int32 {
	if x != nil {
		return x.TalkTimeMinutes
	}
	return 0
}

func (x *StressLog_Log) GetHadStressCoping() bool {
	if x != nil {
		return x.HadStressCoping
	}
	return false
}

type StressLog_StatisticsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since             *pramanapi.Date `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until             *pramanapi.Date `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	DaytimeMood       *Statistics     `protobuf:"bytes,3,opt,name=daytime_mood,json=daytimeMood,proto3" json:"daytime_mood,omitempty"`                     // 日中の気分統計
	DaytimeEmotion    *Statistics     `protobuf:"bytes,4,opt,name=daytime_emotion,json=daytimeEmotion,proto3" json:"daytime_emotion,omitempty"`            // 日中のストレス統計
	TalkTimeMinutes   *Statistics     `protobuf:"bytes,5,opt,name=talk_time_minutes,json=talkTimeMinutes,proto3" json:"talk_time_minutes,omitempty"`       // 会話時間統計
	StressCopingCount *Statistics     `protobuf:"bytes,6,opt,name=stress_coping_count,json=stressCopingCount,proto3" json:"stress_coping_count,omitempty"` // ストレスコーピング回数統計
}

func (x *StressLog_StatisticsSummary) Reset() {
	*x = StressLog_StatisticsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StressLog_StatisticsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StressLog_StatisticsSummary) ProtoMessage() {}

func (x *StressLog_StatisticsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StressLog_StatisticsSummary.ProtoReflect.Descriptor instead.
func (*StressLog_StatisticsSummary) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{8, 1}
}

func (x *StressLog_StatisticsSummary) GetSince() *pramanapi.Date {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *StressLog_StatisticsSummary) GetUntil() *pramanapi.Date {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *StressLog_StatisticsSummary) GetDaytimeMood() *Statistics {
	if x != nil {
		return x.DaytimeMood
	}
	return nil
}

func (x *StressLog_StatisticsSummary) GetDaytimeEmotion() *Statistics {
	if x != nil {
		return x.DaytimeEmotion
	}
	return nil
}

func (x *StressLog_StatisticsSummary) GetTalkTimeMinutes() *Statistics {
	if x != nil {
		return x.TalkTimeMinutes
	}
	return nil
}

func (x *StressLog_StatisticsSummary) GetStressCopingCount() *Statistics {
	if x != nil {
		return x.StressCopingCount
	}
	return nil
}

type StoolLog_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date              *pramanapi.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	HadStool          bool            `protobuf:"varint,2,opt,name=had_stool,json=hadStool,proto3" json:"had_stool,omitempty"`                              // 排便: あり=true, なし=false
	BristolStoolScale int32           `protobuf:"varint,3,opt,name=bristol_stool_scale,json=bristolStoolScale,proto3" json:"bristol_stool_scale,omitempty"` // 便の硬さ (1-7)
}

func (x *StoolLog_Log) Reset() {
	*x = StoolLog_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoolLog_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoolLog_Log) ProtoMessage() {}

func (x *StoolLog_Log) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoolLog_Log.ProtoReflect.Descriptor instead.
func (*StoolLog_Log) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{9, 0}
}

func (x *StoolLog_Log) GetDate() *pramanapi.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *StoolLog_Log) GetHadStool() bool {
	if x != nil {
		return x.HadStool
	}
	return false
}

func (x *StoolLog_Log) GetBristolStoolScale() int32 {
	if x != nil {
		return x.BristolStoolScale
	}
	return 0
}

type StoolLog_StatisticsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since             *pramanapi.Date `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until             *pramanapi.Date `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	StoolCount        *Statistics     `protobuf:"bytes,3,opt,name=stool_count,json=stoolCount,proto3" json:"stool_count,omitempty"`                        // 排便回数統計
	BristolStoolScale *Statistics     `protobuf:"bytes,4,opt,name=bristol_stool_scale,json=bristolStoolScale,proto3" json:"bristol_stool_scale,omitempty"` // 便の硬さ統計
}

func (x *StoolLog_StatisticsSummary) Reset() {
	*x = StoolLog_StatisticsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordlog_recordlog_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoolLog_StatisticsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoolLog_StatisticsSummary) ProtoMessage() {}

func (x *StoolLog_StatisticsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_recordlog_recordlog_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoolLog_StatisticsSummary.ProtoReflect.Descriptor instead.
func (*StoolLog_StatisticsSummary) Descriptor() ([]byte, []int) {
	return file_recordlog_recordlog_proto_rawDescGZIP(), []int{9, 1}
}

func (x *StoolLog_StatisticsSummary) GetSince() *pramanapi.Date {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *StoolLog_StatisticsSummary) GetUntil() *pramanapi.Date {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *StoolLog_StatisticsSummary) GetStoolCount() *Statistics {
	if x != nil {
		return x.StoolCount
	}
	return nil
}

func (x *StoolLog_StatisticsSummary) GetBristolStoolScale() *Statistics {
	if x != nil {
		return x.BristolStoolScale
	}
	return nil
}

var File_recordlog_recordlog_proto protoreflect.FileDescriptor

var file_recordlog_recordlog_proto_rawDesc = []byte{
	0x0a, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6c, 0x6f, 0x67, 0x1a, 0x0c, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x22, 0x92, 0x04, 0x0a, 0x0e, 0x42, 0x6f, 0x64,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x44, 0x0a, 0x06, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x12, 0x69, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x62, 0x0a, 0x03,
	0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x46, 0x61, 0x74,
	0x1a, 0xea, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x3c,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x08,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x46, 0x61, 0x74, 0x22, 0xa2, 0x09,
	0x0a, 0x08, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x3e, 0x0a, 0x06, 0x77, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4c, 0x6f, 0x67, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x12, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f,
	0x67, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a,
	0xa2, 0x02, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x77, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x41, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x61,
	0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x66, 0x61, 0x6c, 0x6c,
	0x41, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x1a, 0xcb, 0x05, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x12, 0x5a, 0x0a, 0x16, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x14, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x10, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e,
	0x62, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x11, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x77, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x55, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x77, 0x61,
	0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61,
	0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x1e, 0x66, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1b, 0x66, 0x61, 0x6c, 0x6c, 0x41, 0x73, 0x6c, 0x65, 0x65,
	0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0c, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x53, 0x0a,
	0x12, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x11, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x22, 0x98, 0x12, 0x0a, 0x07, 0x4d, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x3d,
	0x0a, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x4c, 0x6f,
	0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x62, 0x0a,
	0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x1a, 0xd6, 0x05, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6b, 0x63,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x61, 0x6b, 0x65,
	0x4b, 0x63, 0x61, 0x6c, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x66, 0x63, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67,
	0x2e, 0x50, 0x46, 0x43, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x66, 0x63,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x66, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f,
	0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x66, 0x61, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x05, 0x6c, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c,
	0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x05, 0x6c, 0x75,
	0x6e, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x06, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4d,
	0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x52,
	0x06, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x6e, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c,
	0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x4d,
	0x65, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x6e, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5c, 0x0a, 0x0a, 0x50, 0x46, 0x43, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66,
	0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x68, 0x79, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x68,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x72, 0x0a, 0x04, 0x4d, 0x65, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x61, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x64,
	0x61, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x75, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x72, 0x75, 0x69, 0x74, 0x1a, 0x90, 0x0b, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x61,
	0x6b, 0x65, 0x5f, 0x6b, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x61, 0x6b, 0x65, 0x4b, 0x63, 0x61, 0x6c, 0x12,
	0x5f, 0x0a, 0x0b, 0x70, 0x66, 0x63, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e,
	0x4d, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x46, 0x43, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x66, 0x63, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x5d, 0x0a, 0x18, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x73, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x63, 0x68, 0x53, 0x76, 0x12, 0x3d, 0x0a, 0x07, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x73, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x06, 0x73, 0x69, 0x64, 0x65, 0x53, 0x76, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x76, 0x12, 0x3f, 0x0a, 0x08, 0x64, 0x61, 0x69,
	0x72, 0x79, 0x5f, 0x73, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x07, 0x64, 0x61, 0x69, 0x72, 0x79, 0x53, 0x76, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x72,
	0x75, 0x69, 0x74, 0x5f, 0x73, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x07, 0x66, 0x72, 0x75, 0x69, 0x74, 0x53, 0x76, 0x12, 0x4d, 0x0a, 0x0f, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x66, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x6c, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c,
	0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x6e, 0x6f,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x6e, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0b, 0x6e, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xce, 0x01, 0x0a,
	0x0a, 0x50, 0x46, 0x43, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x03, 0x66,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x03,
	0x66, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x68, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0c, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x22, 0xb8, 0x08,
	0x0a, 0x12, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e,
	0x65, 0x4c, 0x6f, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e,
	0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x4c,
	0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x6d,
	0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x43, 0x61, 0x66,
	0x66, 0x65, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xf5, 0x01,
	0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x63, 0x6f, 0x68,
	0x6f, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61,
	0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x62, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x63, 0x61, 0x66, 0x66,
	0x65, 0x69, 0x6e, 0x65, 0x41, 0x62, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xf0, 0x04, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x12, 0x49, 0x0a, 0x0d, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0c, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f,
	0x0a, 0x10, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f,
	0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x4b, 0x0a, 0x0e, 0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c,
	0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x63,
	0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x11,
	0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c,
	0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x63,
	0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x64, 0x0a, 0x1b, 0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x19, 0x63, 0x61, 0x66, 0x66,
	0x65, 0x69, 0x6e, 0x65, 0x41, 0x62, 0x73, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61,
	0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x17, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0xc8, 0x08, 0x0a, 0x0a, 0x54, 0x61, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x4c, 0x6f, 0x67, 0x12, 0x40, 0x0a, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c,
	0x6f, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x65, 0x0a, 0x12, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x68, 0x0a, 0x14, 0x74, 0x77, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x61, 0x63, 0x63,
	0x6f, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x12, 0x74, 0x77, 0x6f, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x6c, 0x0a, 0x16, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x4c, 0x6f, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x14, 0x74, 0x68, 0x72, 0x65, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xc5, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x61,
	0x62, 0x61, 0x63, 0x63, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x64, 0x5f, 0x63, 0x69, 0x67,
	0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61,
	0x64, 0x43, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61,
	0x64, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x68, 0x61, 0x64, 0x48, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x64,
	0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x68, 0x61, 0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x1a, 0xf0, 0x03, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x4f,
	0x0a, 0x10, 0x74, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f,
	0x74, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x49, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x74, 0x61,
	0x62, 0x61, 0x63, 0x63, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x69,
	0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x63, 0x69, 0x67, 0x61, 0x72,
	0x65, 0x74, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x90, 0x0a, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4c, 0x6f, 0x67, 0x12, 0x41, 0x0a, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x06,
	0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xe9,
	0x02, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x64, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x68, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x64, 0x5f, 0x68,
	0x6f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68,
	0x61, 0x64, 0x48, 0x6f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0xe9, 0x05, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c,
	0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x12, 0x73, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a,
	0x17, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x15, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x62, 0x6f,
	0x64, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a,
	0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x68, 0x6f, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x06, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x12, 0x3f, 0x0a, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x64, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xd3, 0x01, 0x0a, 0x03,
	0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x6f, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x6c,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x6c, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x68, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x70, 0x69, 0x6e,
	0x67, 0x1a, 0xab, 0x03, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12,
	0x47, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x64, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x74, 0x61, 0x6c, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x74, 0x61, 0x6c, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x74, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x73, 0x74,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb8, 0x04, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x3e, 0x0a, 0x06,
	0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74,
	0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x12,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x1a, 0x7c, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x64, 0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x12,
	0x2e, 0x0a, 0x13, 0x62, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x72,
	0x69, 0x73, 0x74, 0x6f, 0x6c, 0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x1a,
	0x88, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x45, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x6f, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x62, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x5f,
	0x73, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x62, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x6c,
	0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x32, 0x84, 0x06, 0x0a, 0x10, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x63, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x61, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x4c, 0x6f, 0x67, 0x12, 0x57, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x61, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x55, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x74, 0x61,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x61,
	0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x63, 0x6f, 0x68,
	0x6f, 0x6c, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x41,
	0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x4c, 0x6f,
	0x67, 0x12, 0x5b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x4c,
	0x6f, 0x67, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x4c, 0x6f, 0x67, 0x12, 0x5d,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x12, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61,
	0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f,
	0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x59, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x57, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c,
	0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f,
	0x67, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x61, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_recordlog_recordlog_proto_rawDescOnce sync.Once
	file_recordlog_recordlog_proto_rawDescData = file_recordlog_recordlog_proto_rawDesc
)

func file_recordlog_recordlog_proto_rawDescGZIP() []byte {
	file_recordlog_recordlog_proto_rawDescOnce.Do(func() {
		file_recordlog_recordlog_proto_rawDescData = protoimpl.X.CompressGZIP(file_recordlog_recordlog_proto_rawDescData)
	})
	return file_recordlog_recordlog_proto_rawDescData
}

var file_recordlog_recordlog_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_recordlog_recordlog_proto_goTypes = []any{
	(*LogRequest)(nil),                           // 0: taomics.praman.recordlog.LogRequest
	(*Statistics)(nil),                           // 1: taomics.praman.recordlog.Statistics
	(*BodyMetricsLog)(nil),                       // 2: taomics.praman.recordlog.BodyMetricsLog
	(*SleepLog)(nil),                             // 3: taomics.praman.recordlog.SleepLog
	(*MealLog)(nil),                              // 4: taomics.praman.recordlog.MealLog
	(*AlcoholCaffeineLog)(nil),                   // 5: taomics.praman.recordlog.AlcoholCaffeineLog
	(*TabaccoLog)(nil),                           // 6: taomics.praman.recordlog.TabaccoLog
	(*ActivityLog)(nil),                          // 7: taomics.praman.recordlog.ActivityLog
	(*StressLog)(nil),                            // 8: taomics.praman.recordlog.StressLog
	(*StoolLog)(nil),                             // 9: taomics.praman.recordlog.StoolLog
	(*BodyMetricsLog_Log)(nil),                   // 10: taomics.praman.recordlog.BodyMetricsLog.Log
	(*BodyMetricsLog_StatisticsSummary)(nil),     // 11: taomics.praman.recordlog.BodyMetricsLog.StatisticsSummary
	(*SleepLog_Log)(nil),                         // 12: taomics.praman.recordlog.SleepLog.Log
	(*SleepLog_StatisticsSummary)(nil),           // 13: taomics.praman.recordlog.SleepLog.StatisticsSummary
	(*MealLog_Log)(nil),                          // 14: taomics.praman.recordlog.MealLog.Log
	(*MealLog_StatisticsSummary)(nil),            // 15: taomics.praman.recordlog.MealLog.StatisticsSummary
	(*MealLog_Log_PFCBalance)(nil),               // 16: taomics.praman.recordlog.MealLog.Log.PFCBalance
	(*MealLog_Log_Meal)(nil),                     // 17: taomics.praman.recordlog.MealLog.Log.Meal
	(*MealLog_StatisticsSummary_PFCBalance)(nil), // 18: taomics.praman.recordlog.MealLog.StatisticsSummary.PFCBalance
	(*AlcoholCaffeineLog_Log)(nil),               // 19: taomics.praman.recordlog.AlcoholCaffeineLog.Log
	(*AlcoholCaffeineLog_StatisticsSummary)(nil), // 20: taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary
	(*TabaccoLog_Log)(nil),                       // 21: taomics.praman.recordlog.TabaccoLog.Log
	(*TabaccoLog_StatisticsSummary)(nil),         // 22: taomics.praman.recordlog.TabaccoLog.StatisticsSummary
	(*ActivityLog_Log)(nil),                      // 23: taomics.praman.recordlog.ActivityLog.Log
	(*ActivityLog_StatisticsSummary)(nil),        // 24: taomics.praman.recordlog.ActivityLog.StatisticsSummary
	(*StressLog_Log)(nil),                        // 25: taomics.praman.recordlog.StressLog.Log
	(*StressLog_StatisticsSummary)(nil),          // 26: taomics.praman.recordlog.StressLog.StatisticsSummary
	(*StoolLog_Log)(nil),                         // 27: taomics.praman.recordlog.StoolLog.Log
	(*StoolLog_StatisticsSummary)(nil),           // 28: taomics.praman.recordlog.StoolLog.StatisticsSummary
	(pramanapi.Timezone)(0),                      // 29: taomics.praman.Timezone
	(*pramanapi.Date)(nil),                       // 30: taomics.praman.Date
}
var file_recordlog_recordlog_proto_depIdxs = []int32{
	29,  // 0: taomics.praman.recordlog.LogRequest.timezone:type_name -> taomics.praman.Timezone
	10,  // 1: taomics.praman.recordlog.BodyMetricsLog.weekly:type_name -> taomics.praman.recordlog.BodyMetricsLog.Log
	11,  // 2: taomics.praman.recordlog.BodyMetricsLog.monthly_statistics:type_name -> taomics.praman.recordlog.BodyMetricsLog.StatisticsSummary
	12,  // 3: taomics.praman.recordlog.SleepLog.weekly:type_name -> taomics.praman.recordlog.SleepLog.Log
	13,  // 4: taomics.praman.recordlog.SleepLog.monthly_statistics:type_name -> taomics.praman.recordlog.SleepLog.StatisticsSummary
	14,  // 5: taomics.praman.recordlog.MealLog.weekly:type_name -> taomics.praman.recordlog.MealLog.Log
	15,  // 6: taomics.praman.recordlog.MealLog.monthly_statistics:type_name -> taomics.praman.recordlog.MealLog.StatisticsSummary
	19,  // 7: taomics.praman.recordlog.AlcoholCaffeineLog.weekly:type_name -> taomics.praman.recordlog.AlcoholCaffeineLog.Log
	20,  // 8: taomics.praman.recordlog.AlcoholCaffeineLog.monthly_statistics:type_name -> taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary
	21,  // 9: taomics.praman.recordlog.TabaccoLog.weekly:type_name -> taomics.praman.recordlog.TabaccoLog.Log
	22,  // 10: taomics.praman.recordlog.TabaccoLog.monthly_statistics:type_name -> taomics.praman.recordlog.TabaccoLog.StatisticsSummary
	22,  // 11: taomics.praman.recordlog.TabaccoLog.two_month_statistics:type_name -> taomics.praman.recordlog.TabaccoLog.StatisticsSummary
	22,  // 12: taomics.praman.recordlog.TabaccoLog.three_month_statistics:type_name -> taomics.praman.recordlog.TabaccoLog.StatisticsSummary
	23,  // 13: taomics.praman.recordlog.ActivityLog.weekly:type_name -> taomics.praman.recordlog.ActivityLog.Log
	24,  // 14: taomics.praman.recordlog.ActivityLog.monthly_statistics:type_name -> taomics.praman.recordlog.ActivityLog.StatisticsSummary
	25,  // 15: taomics.praman.recordlog.StressLog.weekly:type_name -> taomics.praman.recordlog.StressLog.Log
	26,  // 16: taomics.praman.recordlog.StressLog.monthly_statistics:type_name -> taomics.praman.recordlog.StressLog.StatisticsSummary
	27,  // 17: taomics.praman.recordlog.StoolLog.weekly:type_name -> taomics.praman.recordlog.StoolLog.Log
	28,  // 18: taomics.praman.recordlog.StoolLog.monthly_statistics:type_name -> taomics.praman.recordlog.StoolLog.StatisticsSummary
	30,  // 19: taomics.praman.recordlog.BodyMetricsLog.Log.date:type_name -> taomics.praman.Date
	30,  // 20: taomics.praman.recordlog.BodyMetricsLog.StatisticsSummary.since:type_name -> taomics.praman.Date
	30,  // 21: taomics.praman.recordlog.BodyMetricsLog.StatisticsSummary.until:type_name -> taomics.praman.Date
	1,   // 22: taomics.praman.recordlog.BodyMetricsLog.StatisticsSummary.weight:type_name -> taomics.praman.recordlog.Statistics
	1,   // 23: taomics.praman.recordlog.BodyMetricsLog.StatisticsSummary.body_fat:type_name -> taomics.praman.recordlog.Statistics
	30,  // 24: taomics.praman.recordlog.SleepLog.Log.date:type_name -> taomics.praman.Date
	30,  // 25: taomics.praman.recordlog.SleepLog.StatisticsSummary.since:type_name -> taomics.praman.Date
	30,  // 26: taomics.praman.recordlog.SleepLog.StatisticsSummary.until:type_name -> taomics.praman.Date
	1,   // 27: taomics.praman.recordlog.SleepLog.StatisticsSummary.sleep_duration_minutes:type_name -> taomics.praman.recordlog.Statistics
	1,   // 28: taomics.praman.recordlog.SleepLog.StatisticsSummary.bed_time_minutes:type_name -> taomics.praman.recordlog.Statistics
	1,   // 29: taomics.praman.recordlog.SleepLog.StatisticsSummary.wake_time_minutes:type_name -> taomics.praman.recordlog.Statistics
	1,   // 30: taomics.praman.recordlog.SleepLog.StatisticsSummary.frequent_awakenings:type_name -> taomics.praman.recordlog.Statistics
	1,   // 31: taomics.praman.recordlog.SleepLog.StatisticsSummary.fall_asleep_difficulty_minutes:type_name -> taomics.praman.recordlog.Statistics
	1,   // 32: taomics.praman.recordlog.SleepLog.StatisticsSummary.sleep_quality:type_name -> taomics.praman.recordlog.Statistics
	1,   // 33: taomics.praman.recordlog.SleepLog.StatisticsSummary.daytime_sleepiness:type_name -> taomics.praman.recordlog.Statistics
	30,  // 34: taomics.praman.recordlog.MealLog.Log.date:type_name -> taomics.praman.Date
	16,  // 35: taomics.praman.recordlog.MealLog.Log.pfc_balance:type_name -> taomics.praman.recordlog.MealLog.Log.PFCBalance
	17,  // 36: taomics.praman.recordlog.MealLog.Log.breakfast:type_name -> taomics.praman.recordlog.MealLog.Log.Meal
	17,  // 37: taomics.praman.recordlog.MealLog.Log.lunch:type_name -> taomics.praman.recordlog.MealLog.Log.Meal
	17,  // 38: taomics.praman.recordlog.MealLog.Log.dinner:type_name -> taomics.praman.recordlog.MealLog.Log.Meal
	17,  // 39: taomics.praman.recordlog.MealLog.Log.snacks:type_name -> taomics.praman.recordlog.MealLog.Log.Meal
	30,  // 40: taomics.praman.recordlog.MealLog.StatisticsSummary.since:type_name -> taomics.praman.Date
	30,  // 41: taomics.praman.recordlog.MealLog.StatisticsSummary.until:type_name -> taomics.praman.Date
	1,   // 42: taomics.praman.recordlog.MealLog.StatisticsSummary.intake_kcal:type_name -> taomics.praman.recordlog.Statistics
	18,  // 43: taomics.praman.recordlog.MealLog.StatisticsSummary.pfc_balance:type_name -> taomics.praman.recordlog.MealLog.StatisticsSummary.PFCBalance
	1,   // 44: taomics.praman.recordlog.MealLog.StatisticsSummary.extra_energy:type_name -> taomics.praman.recordlog.Statistics
	1,   // 45: taomics.praman.recordlog.MealLog.StatisticsSummary.last_eating_time_minutes:type_name -> taomics.praman.recordlog.Statistics
	1,   // 46: taomics.praman.recordlog.MealLog.StatisticsSummary.starch_sv:type_name -> taomics.praman.recordlog.Statistics
	1,   // 47: taomics.praman.recordlog.MealLog.StatisticsSummary.side_sv:type_name -> taomics.praman.recordlog.Statistics
	1,   // 48: taomics.praman.recordlog.MealLog.StatisticsSummary.main_sv:type_name -> taomics.praman.recordlog.Statistics
	1,   // 49: taomics.praman.recordlog.MealLog.StatisticsSummary.dairy_sv:type_name -> taomics.praman.recordlog.Statistics
	1,   // 50: taomics.praman.recordlog.MealLog.StatisticsSummary.fruit_sv:type_name -> taomics.praman.recordlog.Statistics
	1,   // 51: taomics.praman.recordlog.MealLog.StatisticsSummary.breakfast_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 52: taomics.praman.recordlog.MealLog.StatisticsSummary.lunch_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 53: taomics.praman.recordlog.MealLog.StatisticsSummary.dinner_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 54: taomics.praman.recordlog.MealLog.StatisticsSummary.no_starch_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 55: taomics.praman.recordlog.MealLog.StatisticsSummary.no_main_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 56: taomics.praman.recordlog.MealLog.StatisticsSummary.no_side_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 57: taomics.praman.recordlog.MealLog.StatisticsSummary.PFCBalance.protein:type_name -> taomics.praman.recordlog.Statistics
	1,   // 58: taomics.praman.recordlog.MealLog.StatisticsSummary.PFCBalance.fat:type_name -> taomics.praman.recordlog.Statistics
	1,   // 59: taomics.praman.recordlog.MealLog.StatisticsSummary.PFCBalance.carbohydrate:type_name -> taomics.praman.recordlog.Statistics
	30,  // 60: taomics.praman.recordlog.AlcoholCaffeineLog.Log.date:type_name -> taomics.praman.Date
	30,  // 61: taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary.since:type_name -> taomics.praman.Date
	30,  // 62: taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary.until:type_name -> taomics.praman.Date
	1,   // 63: taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary.alcohol_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 64: taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary.alcohol_quantity:type_name -> taomics.praman.recordlog.Statistics
	1,   // 65: taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary.caffeine_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 66: taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary.caffeine_quantity:type_name -> taomics.praman.recordlog.Statistics
	1,   // 67: taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary.caffeine_abstinence_minutes:type_name -> taomics.praman.recordlog.Statistics
	1,   // 68: taomics.praman.recordlog.AlcoholCaffeineLog.StatisticsSummary.last_caffeine_time_minutes:type_name -> taomics.praman.recordlog.Statistics
	30,  // 69: taomics.praman.recordlog.TabaccoLog.Log.date:type_name -> taomics.praman.Date
	30,  // 70: taomics.praman.recordlog.TabaccoLog.StatisticsSummary.since:type_name -> taomics.praman.Date
	30,  // 71: taomics.praman.recordlog.TabaccoLog.StatisticsSummary.until:type_name -> taomics.praman.Date
	1,   // 72: taomics.praman.recordlog.TabaccoLog.StatisticsSummary.tabacco_quantity:type_name -> taomics.praman.recordlog.Statistics
	1,   // 73: taomics.praman.recordlog.TabaccoLog.StatisticsSummary.tabacco_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 74: taomics.praman.recordlog.TabaccoLog.StatisticsSummary.cigarette_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 75: taomics.praman.recordlog.TabaccoLog.StatisticsSummary.heated_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 76: taomics.praman.recordlog.TabaccoLog.StatisticsSummary.electronic_count:type_name -> taomics.praman.recordlog.Statistics
	30,  // 77: taomics.praman.recordlog.ActivityLog.Log.date:type_name -> taomics.praman.Date
	30,  // 78: taomics.praman.recordlog.ActivityLog.StatisticsSummary.since:type_name -> taomics.praman.Date
	30,  // 79: taomics.praman.recordlog.ActivityLog.StatisticsSummary.until:type_name -> taomics.praman.Date
	1,   // 80: taomics.praman.recordlog.ActivityLog.StatisticsSummary.steps:type_name -> taomics.praman.recordlog.Statistics
	1,   // 81: taomics.praman.recordlog.ActivityLog.StatisticsSummary.activity_minutes:type_name -> taomics.praman.recordlog.Statistics
	1,   // 82: taomics.praman.recordlog.ActivityLog.StatisticsSummary.sitting_time_minutes:type_name -> taomics.praman.recordlog.Statistics
	1,   // 83: taomics.praman.recordlog.ActivityLog.StatisticsSummary.strength_training_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 84: taomics.praman.recordlog.ActivityLog.StatisticsSummary.body_weight_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 85: taomics.praman.recordlog.ActivityLog.StatisticsSummary.machine_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 86: taomics.praman.recordlog.ActivityLog.StatisticsSummary.resistance_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 87: taomics.praman.recordlog.ActivityLog.StatisticsSummary.holistic_count:type_name -> taomics.praman.recordlog.Statistics
	30,  // 88: taomics.praman.recordlog.StressLog.Log.date:type_name -> taomics.praman.Date
	30,  // 89: taomics.praman.recordlog.StressLog.StatisticsSummary.since:type_name -> taomics.praman.Date
	30,  // 90: taomics.praman.recordlog.StressLog.StatisticsSummary.until:type_name -> taomics.praman.Date
	1,   // 91: taomics.praman.recordlog.StressLog.StatisticsSummary.daytime_mood:type_name -> taomics.praman.recordlog.Statistics
	1,   // 92: taomics.praman.recordlog.StressLog.StatisticsSummary.daytime_emotion:type_name -> taomics.praman.recordlog.Statistics
	1,   // 93: taomics.praman.recordlog.StressLog.StatisticsSummary.talk_time_minutes:type_name -> taomics.praman.recordlog.Statistics
	1,   // 94: taomics.praman.recordlog.StressLog.StatisticsSummary.stress_coping_count:type_name -> taomics.praman.recordlog.Statistics
	30,  // 95: taomics.praman.recordlog.StoolLog.Log.date:type_name -> taomics.praman.Date
	30,  // 96: taomics.praman.recordlog.StoolLog.StatisticsSummary.since:type_name -> taomics.praman.Date
	30,  // 97: taomics.praman.recordlog.StoolLog.StatisticsSummary.until:type_name -> taomics.praman.Date
	1,   // 98: taomics.praman.recordlog.StoolLog.StatisticsSummary.stool_count:type_name -> taomics.praman.recordlog.Statistics
	1,   // 99: taomics.praman.recordlog.StoolLog.StatisticsSummary.bristol_stool_scale:type_name -> taomics.praman.recordlog.Statistics
	0,   // 100: taomics.praman.recordlog.RecordLogService.GetBodyMetricsLog:input_type -> taomics.praman.recordlog.LogRequest
	0,   // 101: taomics.praman.recordlog.RecordLogService.GetSleepLog:input_type -> taomics.praman.recordlog.LogRequest
	0,   // 102: taomics.praman.recordlog.RecordLogService.GetMealLog:input_type -> taomics.praman.recordlog.LogRequest
	0,   // 103: taomics.praman.recordlog.RecordLogService.GetAlcoholCaffeineLog:input_type -> taomics.praman.recordlog.LogRequest
	0,   // 104: taomics.praman.recordlog.RecordLogService.GetTabaccoLog:input_type -> taomics.praman.recordlog.LogRequest
	0,   // 105: taomics.praman.recordlog.RecordLogService.GetActivityLog:input_type -> taomics.praman.recordlog.LogRequest
	0,   // 106: taomics.praman.recordlog.RecordLogService.GetStressLog:input_type -> taomics.praman.recordlog.LogRequest
	0,   // 107: taomics.praman.recordlog.RecordLogService.GetStoolLog:input_type -> taomics.praman.recordlog.LogRequest
	2,   // 108: taomics.praman.recordlog.RecordLogService.GetBodyMetricsLog:output_type -> taomics.praman.recordlog.BodyMetricsLog
	3,   // 109: taomics.praman.recordlog.RecordLogService.GetSleepLog:output_type -> taomics.praman.recordlog.SleepLog
	4,   // 110: taomics.praman.recordlog.RecordLogService.GetMealLog:output_type -> taomics.praman.recordlog.MealLog
	5,   // 111: taomics.praman.recordlog.RecordLogService.GetAlcoholCaffeineLog:output_type -> taomics.praman.recordlog.AlcoholCaffeineLog
	6,   // 112: taomics.praman.recordlog.RecordLogService.GetTabaccoLog:output_type -> taomics.praman.recordlog.TabaccoLog
	7,   // 113: taomics.praman.recordlog.RecordLogService.GetActivityLog:output_type -> taomics.praman.recordlog.ActivityLog
	8,   // 114: taomics.praman.recordlog.RecordLogService.GetStressLog:output_type -> taomics.praman.recordlog.StressLog
	9,   // 115: taomics.praman.recordlog.RecordLogService.GetStoolLog:output_type -> taomics.praman.recordlog.StoolLog
	108, // [108:116] is the sub-list for method output_type
	100, // [100:108] is the sub-list for method input_type
	100, // [100:100] is the sub-list for extension type_name
	100, // [100:100] is the sub-list for extension extendee
	0,   // [0:100] is the sub-list for field type_name
}

func init() { file_recordlog_recordlog_proto_init() }
func file_recordlog_recordlog_proto_init() {
	if File_recordlog_recordlog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recordlog_recordlog_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BodyMetricsLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SleepLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MealLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AlcoholCaffeineLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TabaccoLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ActivityLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StressLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*StoolLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BodyMetricsLog_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*BodyMetricsLog_StatisticsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SleepLog_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SleepLog_StatisticsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MealLog_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MealLog_StatisticsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MealLog_Log_PFCBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MealLog_Log_Meal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MealLog_StatisticsSummary_PFCBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*AlcoholCaffeineLog_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AlcoholCaffeineLog_StatisticsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*TabaccoLog_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*TabaccoLog_StatisticsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ActivityLog_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ActivityLog_StatisticsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*StressLog_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*StressLog_StatisticsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*StoolLog_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordlog_recordlog_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*StoolLog_StatisticsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recordlog_recordlog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_recordlog_recordlog_proto_goTypes,
		DependencyIndexes: file_recordlog_recordlog_proto_depIdxs,
		MessageInfos:      file_recordlog_recordlog_proto_msgTypes,
	}.Build()
	File_recordlog_recordlog_proto = out.File
	file_recordlog_recordlog_proto_rawDesc = nil
	file_recordlog_recordlog_proto_goTypes = nil
	file_recordlog_recordlog_proto_depIdxs = nil
}
